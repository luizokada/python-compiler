
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSING BREAK CHAR CHARACTER CLOSE_BRAKETS CLOSE_INTER CLOSE_PAREN COMMA DECREMENT DIV DO DOUBLE ELSE EQUALS FLOAT FOR GREATER GREATER_OR_EQUALS IDENTIFIER IF INCREMENT INT LESSER LESSER_OR_EQUALS MAIN MUL NOT NUMBER OPEN_BRAKETS OPEN_INTER OPEN_PAREN OR PRINT RETURN SEMI_COLON STRING_LITERAL SUB SUM WHILE\n        main : type MAIN param scope\n        \n        scope : OPEN_BRAKETS new_scope statements CLOSE_BRAKETS\n              \n        \n        new_scope :\n        \n        statements : statement statements\n                   | statement  \n                   \n        \n        statement : expression SEMI_COLON\n                  | assignment SEMI_COLON\n                  | declaration SEMI_COLON\n                  | array_declaration SEMI_COLON\n                  | if_statement\n                  | for_statement\n                  | do_while_statement\n                  | while_statement\n                  | call_function\n                  | return_statement\n                 \n        \n        assignment : term ASSING expression\n                    | term ASSING term\n                    | term ASSING factor \n                    | term ASSING factor_char\n                    | term array_index ASSING factor\n                    | term array_index ASSING term\n                    | term array_index ASSING factor_char\n        \n        factor_char : CHARACTER\n        \n        expression : expression SUM expression\n                   | expression SUB expression\n                   | expression MUL expression\n                   | expression DIV expression\n                   | expression DECREMENT\n                   | expression INCREMENT\n                   \n                   \n        \n        expression : term\n                    | factor\n        \n        term : IDENTIFIER\n\n        \n        for_statement : FOR OPEN_PAREN for_initilizer SEMI_COLON condition SEMI_COLON expression CLOSE_PAREN scope\n        \n        for_initilizer : assignment\n                       | declaration\n        \n        \n        if_statement : IF OPEN_PAREN condition CLOSE_PAREN scope \n                     | IF OPEN_PAREN condition CLOSE_PAREN scope ELSE scope\n        \n        factor : NUMBER\n        \n        type : INT\n             | FLOAT\n             | CHAR\n        \n        condition : expression OR expression\n                   | expression NOT expression\n                   | expression EQUALS expression\n                   | expression GREATER expression\n                   | expression LESSER expression\n                   | expression GREATER_OR_EQUALS expression\n                   | expression LESSER_OR_EQUALS expression\n                   \n        \n        declaration : type term\n                    | type assignment \n        \n        declarations : declaration COMMA declarations\n                     | declaration\n        \n        passing_param : term COMMA passing_param\n                      | term\n                      | factor COMMA passing_param\n                      | factor\n        \n        param : OPEN_PAREN declarations CLOSE_PAREN\n              | OPEN_PAREN CLOSE_PAREN\n        \n        do_while_statement : DO scope WHILE OPEN_PAREN condition CLOSE_PAREN SEMI_COLON\n      \n        \n        while_statement : WHILE OPEN_PAREN condition CLOSE_PAREN scope\n        \n        \n        print_statement : PRINT OPEN_PAREN STRING_LITERAL CLOSE_PAREN SEMI_COLON\n                        | PRINT OPEN_PAREN STRING_LITERAL COMMA passing_param CLOSE_PAREN SEMI_COLON\n        \n        call_function : IDENTIFIER OPEN_PAREN passing_param CLOSE_PAREN SEMI_COLON\n                      | IDENTIFIER OPEN_PAREN CLOSE_PAREN SEMI_COLON\n                      | print_statement\n                      \n        \n        array_index : OPEN_INTER factor CLOSE_INTER\n        \n        assignment_array : ASSING OPEN_INTER sequence CLOSE_INTER\n        \n        array_declaration : type term OPEN_INTER NUMBER CLOSE_INTER\n                          | type term OPEN_INTER NUMBER CLOSE_INTER assignment_array\n        \n        sequence : NUMBER COMMA sequence\n                 | NUMBER\n                 | CHARACTER COMMA sequence\n                 | CHARACTER\n        \n        return_statement : RETURN expression SEMI_COLON\n                         | RETURN SEMI_COLON\n        '
    
_lr_action_items = {'INT':([0,8,10,15,17,22,27,28,29,30,31,32,42,49,51,58,59,60,63,68,95,114,120,130,131,134,143,145,146,154,],[3,3,-3,3,3,3,-10,-11,-12,-13,-14,-15,-65,-2,-6,-7,-8,-9,3,-75,-74,-64,-36,-60,-63,-61,-37,-59,-62,-33,]),'FLOAT':([0,8,10,15,17,22,27,28,29,30,31,32,42,49,51,58,59,60,63,68,95,114,120,130,131,134,143,145,146,154,],[4,4,-3,4,4,4,-10,-11,-12,-13,-14,-15,-65,-2,-6,-7,-8,-9,4,-75,-74,-64,-36,-60,-63,-61,-37,-59,-62,-33,]),'CHAR':([0,8,10,15,17,22,27,28,29,30,31,32,42,49,51,58,59,60,63,68,95,114,120,130,131,134,143,145,146,154,],[5,5,-3,5,5,5,-10,-11,-12,-13,-14,-15,-65,-2,-6,-7,-8,-9,5,-75,-74,-64,-36,-60,-63,-61,-37,-59,-62,-33,]),'$end':([1,9,49,],[0,-1,-2,]),'MAIN':([2,3,4,5,],[6,-39,-40,-41,]),'IDENTIFIER':([3,4,5,10,14,15,22,27,28,29,30,31,32,35,42,43,46,49,51,52,53,54,55,58,59,60,62,63,65,66,68,76,95,103,104,105,106,107,108,109,110,111,114,115,116,118,120,130,131,134,139,143,145,146,154,],[-39,-40,-41,-3,20,41,41,-10,-11,-12,-13,-14,-15,20,-65,20,20,-2,-6,20,20,20,20,-7,-8,-9,20,20,20,20,-75,20,-74,20,20,20,20,20,20,20,20,20,-64,20,20,20,-36,-60,-63,-61,20,-37,-59,-62,-33,]),'OPEN_PAREN':([6,37,38,40,41,44,89,],[8,62,63,65,66,70,111,]),'OPEN_BRAKETS':([7,12,16,39,102,112,138,150,],[10,-58,-57,10,10,10,10,10,]),'CLOSE_PAREN':([8,11,13,18,19,20,34,36,45,56,57,66,69,71,72,73,74,75,78,79,80,81,83,90,91,93,94,96,97,98,99,121,122,123,124,125,126,127,129,132,133,135,144,],[12,16,-52,-49,-50,-32,-31,-38,-51,-28,-29,92,-30,-17,-16,-18,-19,-23,-24,-25,-26,-27,102,112,113,-54,-56,117,-21,-20,-22,-42,-43,-44,-45,-46,-47,-48,140,-53,-55,141,150,]),'IF':([10,15,22,27,28,29,30,31,32,42,49,51,58,59,60,68,95,114,120,130,131,134,143,145,146,154,],[-3,37,37,-10,-11,-12,-13,-14,-15,-65,-2,-6,-7,-8,-9,-75,-74,-64,-36,-60,-63,-61,-37,-59,-62,-33,]),'FOR':([10,15,22,27,28,29,30,31,32,42,49,51,58,59,60,68,95,114,120,130,131,134,143,145,146,154,],[-3,38,38,-10,-11,-12,-13,-14,-15,-65,-2,-6,-7,-8,-9,-75,-74,-64,-36,-60,-63,-61,-37,-59,-62,-33,]),'DO':([10,15,22,27,28,29,30,31,32,42,49,51,58,59,60,68,95,114,120,130,131,134,143,145,146,154,],[-3,39,39,-10,-11,-12,-13,-14,-15,-65,-2,-6,-7,-8,-9,-75,-74,-64,-36,-60,-63,-61,-37,-59,-62,-33,]),'WHILE':([10,15,22,27,28,29,30,31,32,42,49,51,58,59,60,64,68,95,114,120,130,131,134,143,145,146,154,],[-3,40,40,-10,-11,-12,-13,-14,-15,-65,-2,-6,-7,-8,-9,89,-75,-74,-64,-36,-60,-63,-61,-37,-59,-62,-33,]),'RETURN':([10,15,22,27,28,29,30,31,32,42,49,51,58,59,60,68,95,114,120,130,131,134,143,145,146,154,],[-3,43,43,-10,-11,-12,-13,-14,-15,-65,-2,-6,-7,-8,-9,-75,-74,-64,-36,-60,-63,-61,-37,-59,-62,-33,]),'NUMBER':([10,15,22,27,28,29,30,31,32,42,43,46,48,49,51,52,53,54,55,58,59,60,62,65,66,68,76,82,95,103,104,105,106,107,108,109,110,111,114,115,116,118,120,130,131,134,139,142,143,145,146,152,153,154,],[-3,36,36,-10,-11,-12,-13,-14,-15,-65,36,36,36,-2,-6,36,36,36,36,-7,-8,-9,36,36,36,-75,36,101,-74,36,36,36,36,36,36,36,36,36,-64,36,36,36,-36,-60,-63,-61,36,148,-37,-59,-62,148,148,-33,]),'PRINT':([10,15,22,27,28,29,30,31,32,42,49,51,58,59,60,68,95,114,120,130,131,134,143,145,146,154,],[-3,44,44,-10,-11,-12,-13,-14,-15,-65,-2,-6,-7,-8,-9,-75,-74,-64,-36,-60,-63,-61,-37,-59,-62,-33,]),'COMMA':([13,18,19,20,34,36,56,57,69,71,72,73,74,75,78,79,80,81,93,94,96,97,98,99,148,149,],[17,-49,-50,-32,-31,-38,-28,-29,-30,-17,-16,-18,-19,-23,-24,-25,-26,-27,115,116,118,-21,-20,-22,152,153,]),'SEMI_COLON':([18,19,20,23,24,25,26,33,34,36,41,43,56,57,61,67,69,71,72,73,74,75,78,79,80,81,85,86,87,92,97,98,99,113,117,119,121,122,123,124,125,126,127,128,136,140,141,151,],[-49,-50,-32,51,58,59,60,-30,-31,-38,-32,68,-28,-29,-49,95,-30,-17,-16,-18,-19,-23,-24,-25,-26,-27,110,-34,-35,114,-21,-20,-22,131,134,-68,-42,-43,-44,-45,-46,-47,-48,139,-69,145,146,-67,]),'ASSING':([18,20,33,41,47,61,88,100,119,],[46,-32,46,-32,76,46,46,-66,137,]),'OPEN_INTER':([18,20,33,41,61,88,137,],[48,-32,48,-32,82,48,142,]),'SUM':([20,23,33,34,36,41,56,57,67,69,71,72,73,78,79,80,81,84,121,122,123,124,125,126,127,144,],[-32,52,-30,-31,-38,-32,-28,-29,52,-30,-30,52,-31,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'SUB':([20,23,33,34,36,41,56,57,67,69,71,72,73,78,79,80,81,84,121,122,123,124,125,126,127,144,],[-32,53,-30,-31,-38,-32,-28,-29,53,-30,-30,53,-31,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'MUL':([20,23,33,34,36,41,56,57,67,69,71,72,73,78,79,80,81,84,121,122,123,124,125,126,127,144,],[-32,54,-30,-31,-38,-32,-28,-29,54,-30,-30,54,-31,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'DIV':([20,23,33,34,36,41,56,57,67,69,71,72,73,78,79,80,81,84,121,122,123,124,125,126,127,144,],[-32,55,-30,-31,-38,-32,-28,-29,55,-30,-30,55,-31,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'DECREMENT':([20,23,33,34,36,41,56,57,67,69,71,72,73,78,79,80,81,84,121,122,123,124,125,126,127,144,],[-32,56,-30,-31,-38,-32,-28,-29,56,-30,-30,56,-31,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'INCREMENT':([20,23,33,34,36,41,56,57,67,69,71,72,73,78,79,80,81,84,121,122,123,124,125,126,127,144,],[-32,57,-30,-31,-38,-32,-28,-29,57,-30,-30,57,-31,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'OR':([20,34,36,56,57,69,78,79,80,81,84,],[-32,-31,-38,-28,-29,-30,-24,-25,-26,-27,103,]),'NOT':([20,34,36,56,57,69,78,79,80,81,84,],[-32,-31,-38,-28,-29,-30,-24,-25,-26,-27,104,]),'EQUALS':([20,34,36,56,57,69,78,79,80,81,84,],[-32,-31,-38,-28,-29,-30,-24,-25,-26,-27,105,]),'GREATER':([20,34,36,56,57,69,78,79,80,81,84,],[-32,-31,-38,-28,-29,-30,-24,-25,-26,-27,106,]),'LESSER':([20,34,36,56,57,69,78,79,80,81,84,],[-32,-31,-38,-28,-29,-30,-24,-25,-26,-27,107,]),'GREATER_OR_EQUALS':([20,34,36,56,57,69,78,79,80,81,84,],[-32,-31,-38,-28,-29,-30,-24,-25,-26,-27,108,]),'LESSER_OR_EQUALS':([20,34,36,56,57,69,78,79,80,81,84,],[-32,-31,-38,-28,-29,-30,-24,-25,-26,-27,109,]),'CLOSE_BRAKETS':([21,22,27,28,29,30,31,32,42,49,50,51,58,59,60,68,95,114,120,130,131,134,143,145,146,154,],[49,-5,-10,-11,-12,-13,-14,-15,-65,-2,-4,-6,-7,-8,-9,-75,-74,-64,-36,-60,-63,-61,-37,-59,-62,-33,]),'CLOSE_INTER':([36,77,101,147,148,149,155,156,],[-38,100,119,151,-71,-73,-70,-72,]),'CHARACTER':([46,76,142,152,153,],[75,75,149,149,149,]),'ELSE':([49,120,],[-2,138,]),'STRING_LITERAL':([70,],[96,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'type':([0,8,15,17,22,63,],[2,14,35,14,35,14,]),'param':([6,],[7,]),'scope':([7,39,102,112,138,150,],[9,64,120,130,143,154,]),'declarations':([8,17,],[11,45,]),'declaration':([8,15,17,22,63,],[13,25,13,25,87,]),'new_scope':([10,],[15,]),'term':([14,15,22,35,43,46,52,53,54,55,62,63,65,66,76,103,104,105,106,107,108,109,110,111,115,116,118,139,],[18,33,33,61,69,71,69,69,69,69,69,88,69,93,97,69,69,69,69,69,69,69,69,69,93,93,93,69,]),'assignment':([14,15,22,35,63,],[19,24,24,19,86,]),'statements':([15,22,],[21,50,]),'statement':([15,22,],[22,22,]),'expression':([15,22,43,46,52,53,54,55,62,65,103,104,105,106,107,108,109,110,111,139,],[23,23,67,72,78,79,80,81,84,84,121,122,123,124,125,126,127,84,84,144,]),'array_declaration':([15,22,],[26,26,]),'if_statement':([15,22,],[27,27,]),'for_statement':([15,22,],[28,28,]),'do_while_statement':([15,22,],[29,29,]),'while_statement':([15,22,],[30,30,]),'call_function':([15,22,],[31,31,]),'return_statement':([15,22,],[32,32,]),'factor':([15,22,43,46,48,52,53,54,55,62,65,66,76,82,103,104,105,106,107,108,109,110,111,115,116,118,139,],[34,34,34,73,77,34,34,34,34,34,34,94,98,77,34,34,34,34,34,34,34,34,34,94,94,94,34,]),'print_statement':([15,22,],[42,42,]),'array_index':([18,33,61,88,],[47,47,47,47,]),'factor_char':([46,76,],[74,99,]),'condition':([62,65,110,111,],[83,90,128,129,]),'for_initilizer':([63,],[85,]),'passing_param':([66,115,116,118,],[91,132,133,135,]),'assignment_array':([119,],[136,]),'sequence':([142,152,153,],[147,155,156,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> type MAIN param scope','main',4,'p_start','parser.py',34),
  ('scope -> OPEN_BRAKETS new_scope statements CLOSE_BRAKETS','scope',4,'p_scope','parser.py',42),
  ('new_scope -> <empty>','new_scope',0,'p_new_scope','parser.py',50),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',59),
  ('statements -> statement','statements',1,'p_statements','parser.py',60),
  ('statement -> expression SEMI_COLON','statement',2,'p_statement','parser.py',71),
  ('statement -> assignment SEMI_COLON','statement',2,'p_statement','parser.py',72),
  ('statement -> declaration SEMI_COLON','statement',2,'p_statement','parser.py',73),
  ('statement -> array_declaration SEMI_COLON','statement',2,'p_statement','parser.py',74),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',75),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',76),
  ('statement -> do_while_statement','statement',1,'p_statement','parser.py',77),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',78),
  ('statement -> call_function','statement',1,'p_statement','parser.py',79),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',80),
  ('assignment -> term ASSING expression','assignment',3,'p_assignment','parser.py',87),
  ('assignment -> term ASSING term','assignment',3,'p_assignment','parser.py',88),
  ('assignment -> term ASSING factor','assignment',3,'p_assignment','parser.py',89),
  ('assignment -> term ASSING factor_char','assignment',3,'p_assignment','parser.py',90),
  ('assignment -> term array_index ASSING factor','assignment',4,'p_assignment','parser.py',91),
  ('assignment -> term array_index ASSING term','assignment',4,'p_assignment','parser.py',92),
  ('assignment -> term array_index ASSING factor_char','assignment',4,'p_assignment','parser.py',93),
  ('factor_char -> CHARACTER','factor_char',1,'p_factor_char','parser.py',105),
  ('expression -> expression SUM expression','expression',3,'p_expression_binop','parser.py',112),
  ('expression -> expression SUB expression','expression',3,'p_expression_binop','parser.py',113),
  ('expression -> expression MUL expression','expression',3,'p_expression_binop','parser.py',114),
  ('expression -> expression DIV expression','expression',3,'p_expression_binop','parser.py',115),
  ('expression -> expression DECREMENT','expression',2,'p_expression_binop','parser.py',116),
  ('expression -> expression INCREMENT','expression',2,'p_expression_binop','parser.py',117),
  ('expression -> term','expression',1,'p_expression_term','parser.py',129),
  ('expression -> factor','expression',1,'p_expression_term','parser.py',130),
  ('term -> IDENTIFIER','term',1,'p_term','parser.py',136),
  ('for_statement -> FOR OPEN_PAREN for_initilizer SEMI_COLON condition SEMI_COLON expression CLOSE_PAREN scope','for_statement',9,'p_for_statement','parser.py',145),
  ('for_initilizer -> assignment','for_initilizer',1,'p_for_initializer','parser.py',152),
  ('for_initilizer -> declaration','for_initilizer',1,'p_for_initializer','parser.py',153),
  ('if_statement -> IF OPEN_PAREN condition CLOSE_PAREN scope','if_statement',5,'p_if_statement','parser.py',162),
  ('if_statement -> IF OPEN_PAREN condition CLOSE_PAREN scope ELSE scope','if_statement',7,'p_if_statement','parser.py',163),
  ('factor -> NUMBER','factor',1,'p_factor_num','parser.py',174),
  ('type -> INT','type',1,'p_type','parser.py',180),
  ('type -> FLOAT','type',1,'p_type','parser.py',181),
  ('type -> CHAR','type',1,'p_type','parser.py',182),
  ('condition -> expression OR expression','condition',3,'p_condition','parser.py',190),
  ('condition -> expression NOT expression','condition',3,'p_condition','parser.py',191),
  ('condition -> expression EQUALS expression','condition',3,'p_condition','parser.py',192),
  ('condition -> expression GREATER expression','condition',3,'p_condition','parser.py',193),
  ('condition -> expression LESSER expression','condition',3,'p_condition','parser.py',194),
  ('condition -> expression GREATER_OR_EQUALS expression','condition',3,'p_condition','parser.py',195),
  ('condition -> expression LESSER_OR_EQUALS expression','condition',3,'p_condition','parser.py',196),
  ('declaration -> type term','declaration',2,'p_declaration','parser.py',204),
  ('declaration -> type assignment','declaration',2,'p_declaration','parser.py',205),
  ('declarations -> declaration COMMA declarations','declarations',3,'p_declarations','parser.py',223),
  ('declarations -> declaration','declarations',1,'p_declarations','parser.py',224),
  ('passing_param -> term COMMA passing_param','passing_param',3,'p_passing_param','parser.py',232),
  ('passing_param -> term','passing_param',1,'p_passing_param','parser.py',233),
  ('passing_param -> factor COMMA passing_param','passing_param',3,'p_passing_param','parser.py',234),
  ('passing_param -> factor','passing_param',1,'p_passing_param','parser.py',235),
  ('param -> OPEN_PAREN declarations CLOSE_PAREN','param',3,'p_param','parser.py',246),
  ('param -> OPEN_PAREN CLOSE_PAREN','param',2,'p_param','parser.py',247),
  ('do_while_statement -> DO scope WHILE OPEN_PAREN condition CLOSE_PAREN SEMI_COLON','do_while_statement',7,'p_do_while_statement','parser.py',258),
  ('while_statement -> WHILE OPEN_PAREN condition CLOSE_PAREN scope','while_statement',5,'p_while_statement','parser.py',265),
  ('print_statement -> PRINT OPEN_PAREN STRING_LITERAL CLOSE_PAREN SEMI_COLON','print_statement',5,'p_print_statement','parser.py',272),
  ('print_statement -> PRINT OPEN_PAREN STRING_LITERAL COMMA passing_param CLOSE_PAREN SEMI_COLON','print_statement',7,'p_print_statement','parser.py',273),
  ('call_function -> IDENTIFIER OPEN_PAREN passing_param CLOSE_PAREN SEMI_COLON','call_function',5,'p_call_function','parser.py',283),
  ('call_function -> IDENTIFIER OPEN_PAREN CLOSE_PAREN SEMI_COLON','call_function',4,'p_call_function','parser.py',284),
  ('call_function -> print_statement','call_function',1,'p_call_function','parser.py',285),
  ('array_index -> OPEN_INTER factor CLOSE_INTER','array_index',3,'p_array_index','parser.py',301),
  ('assignment_array -> ASSING OPEN_INTER sequence CLOSE_INTER','assignment_array',4,'p_assignment_array','parser.py',307),
  ('array_declaration -> type term OPEN_INTER NUMBER CLOSE_INTER','array_declaration',5,'p_array_declaration','parser.py',314),
  ('array_declaration -> type term OPEN_INTER NUMBER CLOSE_INTER assignment_array','array_declaration',6,'p_array_declaration','parser.py',315),
  ('sequence -> NUMBER COMMA sequence','sequence',3,'p_sequence','parser.py',327),
  ('sequence -> NUMBER','sequence',1,'p_sequence','parser.py',328),
  ('sequence -> CHARACTER COMMA sequence','sequence',3,'p_sequence','parser.py',329),
  ('sequence -> CHARACTER','sequence',1,'p_sequence','parser.py',330),
  ('return_statement -> RETURN expression SEMI_COLON','return_statement',3,'p_return_statement','parser.py',339),
  ('return_statement -> RETURN SEMI_COLON','return_statement',2,'p_return_statement','parser.py',340),
]
