
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSING BREAK CHAR CHARACTER CLOSE_BRAKETS CLOSE_INTER CLOSE_PAREN COMMA DECREMENT DIV DO DOUBLE ELSE EQUALS FLOAT FOR GREATER GREATER_OR_EQUALS IDENTIFIER IF INCREMENT INT LESSER LESSER_OR_EQUALS MAIN MUL NOT NUMBER OPEN_BRAKETS OPEN_INTER OPEN_PAREN OR PRINT RETURN SEMI_COLON STRING_LITERAL SUB SUM WHILE\n        main : type MAIN param scope\n        \n        scope : OPEN_BRAKETS new_scope statements CLOSE_BRAKETS\n              \n        \n        new_scope :\n        \n        statements : statement statements\n                   | statement  \n                   \n        \n        statement : expression SEMI_COLON\n                  | assignment SEMI_COLON\n                  | declaration SEMI_COLON\n                  | array_declaration SEMI_COLON\n                  | if_statement\n                  | for_statement\n                  | do_while_statement\n                  | while_statement\n                  | call_function\n                  | return_statement\n                 \n        \n        assignment : term ASSING expression\n                    | term ASSING term\n                    | term ASSING factor \n                    | term ASSING factor_char\n                    | term array_index ASSING factor\n                    | term array_index ASSING term\n                    | term array_index ASSING factor_char\n        \n        factor_char : CHARACTER\n        \n        expression : expression SUM expression\n                   | expression SUB expression\n                   | expression MUL expression\n                   | expression DIV expression\n                   | expression DECREMENT\n                   | expression INCREMENT  \n                   | OPEN_PAREN expression CLOSE_PAREN  \n        \n        expression : term\n                    | factor\n                   \n        \n        term : IDENTIFIER\n\n        \n        for_statement : FOR OPEN_PAREN for_initilizer SEMI_COLON condition SEMI_COLON expression CLOSE_PAREN scope\n        \n        for_initilizer : assignment\n                       | declaration\n        \n        \n        if_statement : IF OPEN_PAREN condition CLOSE_PAREN scope \n                     | IF OPEN_PAREN condition CLOSE_PAREN scope ELSE scope\n        \n        factor : NUMBER\n        \n        type : INT\n             | FLOAT\n             | CHAR\n        \n        condition : expression OR expression\n                   | expression NOT expression\n                   | expression EQUALS expression\n                   | expression GREATER expression\n                   | expression LESSER expression\n                   | expression GREATER_OR_EQUALS expression\n                   | expression LESSER_OR_EQUALS expression\n                   \n        \n        declaration : type term\n    \n        \n        declarations : declaration COMMA declarations\n                     | declaration\n        \n        passing_param : term COMMA passing_param\n                      | term\n                      | factor COMMA passing_param\n                      | factor\n        \n        param : OPEN_PAREN declarations CLOSE_PAREN\n              | OPEN_PAREN CLOSE_PAREN\n        \n        do_while_statement : DO scope WHILE OPEN_PAREN condition CLOSE_PAREN SEMI_COLON\n      \n        \n        while_statement : WHILE OPEN_PAREN condition CLOSE_PAREN scope\n        \n        \n        print_statement : PRINT OPEN_PAREN STRING_LITERAL CLOSE_PAREN SEMI_COLON\n                        | PRINT OPEN_PAREN STRING_LITERAL COMMA passing_param CLOSE_PAREN SEMI_COLON\n        \n        call_function : IDENTIFIER OPEN_PAREN passing_param CLOSE_PAREN SEMI_COLON\n                      | IDENTIFIER OPEN_PAREN CLOSE_PAREN SEMI_COLON\n                      | print_statement\n                      \n        \n        array_index : OPEN_INTER factor CLOSE_INTER\n        \n        assignment_array : ASSING OPEN_INTER sequence CLOSE_INTER\n        \n        array_declaration : type term OPEN_INTER NUMBER CLOSE_INTER\n                          | type term OPEN_INTER NUMBER CLOSE_INTER assignment_array\n        \n        sequence : NUMBER COMMA sequence\n                 | NUMBER\n                 | CHARACTER COMMA sequence\n                 | CHARACTER\n        \n        return_statement : RETURN expression SEMI_COLON\n                         | RETURN SEMI_COLON\n        '
    
_lr_action_items = {'INT':([0,8,10,15,17,21,26,27,28,29,30,31,42,46,48,55,56,57,65,70,97,116,122,132,133,136,145,147,148,156,],[3,3,-3,3,3,3,-10,-11,-12,-13,-14,-15,-65,-2,-6,-7,-8,-9,3,-75,-74,-64,-37,-60,-63,-61,-38,-59,-62,-34,]),'FLOAT':([0,8,10,15,17,21,26,27,28,29,30,31,42,46,48,55,56,57,65,70,97,116,122,132,133,136,145,147,148,156,],[4,4,-3,4,4,4,-10,-11,-12,-13,-14,-15,-65,-2,-6,-7,-8,-9,4,-75,-74,-64,-37,-60,-63,-61,-38,-59,-62,-34,]),'CHAR':([0,8,10,15,17,21,26,27,28,29,30,31,42,46,48,55,56,57,65,70,97,116,122,132,133,136,145,147,148,156,],[5,5,-3,5,5,5,-10,-11,-12,-13,-14,-15,-65,-2,-6,-7,-8,-9,5,-75,-74,-64,-37,-60,-63,-61,-38,-59,-62,-34,]),'$end':([1,9,46,],[0,-1,-2,]),'MAIN':([2,3,4,5,],[6,-40,-41,-42,]),'IDENTIFIER':([3,4,5,10,14,15,21,26,27,28,29,30,31,32,35,42,43,46,48,49,50,51,52,55,56,57,60,64,65,67,68,70,82,97,105,106,107,108,109,110,111,112,113,116,117,118,120,122,132,133,136,141,145,147,148,156,],[-40,-41,-42,-3,19,41,41,-10,-11,-12,-13,-14,-15,19,19,-65,19,-2,-6,19,19,19,19,-7,-8,-9,19,19,19,19,19,-75,19,-74,19,19,19,19,19,19,19,19,19,-64,19,19,19,-37,-60,-63,-61,19,-38,-59,-62,-34,]),'OPEN_PAREN':([6,10,15,21,26,27,28,29,30,31,32,37,38,40,41,42,43,44,46,48,49,50,51,52,55,56,57,60,64,67,70,91,97,105,106,107,108,109,110,111,112,113,116,122,132,133,136,141,145,147,148,156,],[8,-3,32,32,-10,-11,-12,-13,-14,-15,32,64,65,67,68,-65,32,71,-2,-6,32,32,32,32,-7,-8,-9,32,32,32,-75,113,-74,32,32,32,32,32,32,32,32,32,-64,-37,-60,-63,-61,32,-38,-59,-62,-34,]),'OPEN_BRAKETS':([7,12,16,39,104,114,140,152,],[10,-58,-57,10,10,10,10,10,]),'CLOSE_PAREN':([8,11,13,18,19,34,36,45,53,54,58,59,68,72,73,74,75,76,85,92,93,95,96,98,123,124,125,126,127,128,129,131,134,135,137,146,],[12,16,-52,-50,-33,-32,-39,-51,-28,-29,76,-31,94,-24,-25,-26,-27,-30,104,114,115,-54,-56,119,-43,-44,-45,-46,-47,-48,-49,142,-53,-55,143,152,]),'IF':([10,15,21,26,27,28,29,30,31,42,46,48,55,56,57,70,97,116,122,132,133,136,145,147,148,156,],[-3,37,37,-10,-11,-12,-13,-14,-15,-65,-2,-6,-7,-8,-9,-75,-74,-64,-37,-60,-63,-61,-38,-59,-62,-34,]),'FOR':([10,15,21,26,27,28,29,30,31,42,46,48,55,56,57,70,97,116,122,132,133,136,145,147,148,156,],[-3,38,38,-10,-11,-12,-13,-14,-15,-65,-2,-6,-7,-8,-9,-75,-74,-64,-37,-60,-63,-61,-38,-59,-62,-34,]),'DO':([10,15,21,26,27,28,29,30,31,42,46,48,55,56,57,70,97,116,122,132,133,136,145,147,148,156,],[-3,39,39,-10,-11,-12,-13,-14,-15,-65,-2,-6,-7,-8,-9,-75,-74,-64,-37,-60,-63,-61,-38,-59,-62,-34,]),'WHILE':([10,15,21,26,27,28,29,30,31,42,46,48,55,56,57,66,70,97,116,122,132,133,136,145,147,148,156,],[-3,40,40,-10,-11,-12,-13,-14,-15,-65,-2,-6,-7,-8,-9,91,-75,-74,-64,-37,-60,-63,-61,-38,-59,-62,-34,]),'RETURN':([10,15,21,26,27,28,29,30,31,42,46,48,55,56,57,70,97,116,122,132,133,136,145,147,148,156,],[-3,43,43,-10,-11,-12,-13,-14,-15,-65,-2,-6,-7,-8,-9,-75,-74,-64,-37,-60,-63,-61,-38,-59,-62,-34,]),'NUMBER':([10,15,21,26,27,28,29,30,31,32,42,43,46,48,49,50,51,52,55,56,57,60,62,64,67,68,70,82,84,97,105,106,107,108,109,110,111,112,113,116,117,118,120,122,132,133,136,141,144,145,147,148,154,155,156,],[-3,36,36,-10,-11,-12,-13,-14,-15,36,-65,36,-2,-6,36,36,36,36,-7,-8,-9,36,36,36,36,36,-75,36,103,-74,36,36,36,36,36,36,36,36,36,-64,36,36,36,-37,-60,-63,-61,36,150,-38,-59,-62,150,150,-34,]),'PRINT':([10,15,21,26,27,28,29,30,31,42,46,48,55,56,57,70,97,116,122,132,133,136,145,147,148,156,],[-3,44,44,-10,-11,-12,-13,-14,-15,-65,-2,-6,-7,-8,-9,-75,-74,-64,-37,-60,-63,-61,-38,-59,-62,-34,]),'COMMA':([13,18,19,36,95,96,98,150,151,],[17,-50,-33,-39,117,118,120,154,155,]),'SEMI_COLON':([18,19,22,23,24,25,33,34,36,41,43,53,54,59,63,69,72,73,74,75,76,77,78,79,80,81,87,88,89,94,99,100,101,115,119,121,123,124,125,126,127,128,129,130,138,142,143,153,],[-50,-33,48,55,56,57,-31,-32,-39,-33,70,-28,-29,-31,-50,97,-24,-25,-26,-27,-30,-17,-16,-18,-19,-23,112,-35,-36,116,-21,-20,-22,133,136,-68,-43,-44,-45,-46,-47,-48,-49,141,-69,147,148,-67,]),'SUM':([19,22,33,34,36,41,53,54,58,59,69,72,73,74,75,76,77,78,79,86,123,124,125,126,127,128,129,146,],[-33,49,-31,-32,-39,-33,-28,-29,49,-31,49,49,49,49,49,-30,-31,49,-32,49,49,49,49,49,49,49,49,49,]),'SUB':([19,22,33,34,36,41,53,54,58,59,69,72,73,74,75,76,77,78,79,86,123,124,125,126,127,128,129,146,],[-33,50,-31,-32,-39,-33,-28,-29,50,-31,50,50,50,50,50,-30,-31,50,-32,50,50,50,50,50,50,50,50,50,]),'MUL':([19,22,33,34,36,41,53,54,58,59,69,72,73,74,75,76,77,78,79,86,123,124,125,126,127,128,129,146,],[-33,51,-31,-32,-39,-33,-28,-29,51,-31,51,51,51,51,51,-30,-31,51,-32,51,51,51,51,51,51,51,51,51,]),'DIV':([19,22,33,34,36,41,53,54,58,59,69,72,73,74,75,76,77,78,79,86,123,124,125,126,127,128,129,146,],[-33,52,-31,-32,-39,-33,-28,-29,52,-31,52,52,52,52,52,-30,-31,52,-32,52,52,52,52,52,52,52,52,52,]),'DECREMENT':([19,22,33,34,36,41,53,54,58,59,69,72,73,74,75,76,77,78,79,86,123,124,125,126,127,128,129,146,],[-33,53,-31,-32,-39,-33,-28,-29,53,-31,53,53,53,53,53,-30,-31,53,-32,53,53,53,53,53,53,53,53,53,]),'INCREMENT':([19,22,33,34,36,41,53,54,58,59,69,72,73,74,75,76,77,78,79,86,123,124,125,126,127,128,129,146,],[-33,54,-31,-32,-39,-33,-28,-29,54,-31,54,54,54,54,54,-30,-31,54,-32,54,54,54,54,54,54,54,54,54,]),'OPEN_INTER':([19,33,41,63,90,139,],[-33,62,-33,84,62,144,]),'OR':([19,34,36,53,54,59,72,73,74,75,76,86,],[-33,-32,-39,-28,-29,-31,-24,-25,-26,-27,-30,105,]),'NOT':([19,34,36,53,54,59,72,73,74,75,76,86,],[-33,-32,-39,-28,-29,-31,-24,-25,-26,-27,-30,106,]),'EQUALS':([19,34,36,53,54,59,72,73,74,75,76,86,],[-33,-32,-39,-28,-29,-31,-24,-25,-26,-27,-30,107,]),'GREATER':([19,34,36,53,54,59,72,73,74,75,76,86,],[-33,-32,-39,-28,-29,-31,-24,-25,-26,-27,-30,108,]),'LESSER':([19,34,36,53,54,59,72,73,74,75,76,86,],[-33,-32,-39,-28,-29,-31,-24,-25,-26,-27,-30,109,]),'GREATER_OR_EQUALS':([19,34,36,53,54,59,72,73,74,75,76,86,],[-33,-32,-39,-28,-29,-31,-24,-25,-26,-27,-30,110,]),'LESSER_OR_EQUALS':([19,34,36,53,54,59,72,73,74,75,76,86,],[-33,-32,-39,-28,-29,-31,-24,-25,-26,-27,-30,111,]),'ASSING':([19,33,41,61,90,102,121,],[-33,60,-33,82,60,-66,139,]),'CLOSE_BRAKETS':([20,21,26,27,28,29,30,31,42,46,47,48,55,56,57,70,97,116,122,132,133,136,145,147,148,156,],[46,-5,-10,-11,-12,-13,-14,-15,-65,-2,-4,-6,-7,-8,-9,-75,-74,-64,-37,-60,-63,-61,-38,-59,-62,-34,]),'CLOSE_INTER':([36,83,103,149,150,151,157,158,],[-39,102,121,153,-71,-73,-70,-72,]),'ELSE':([46,122,],[-2,140,]),'CHARACTER':([60,82,144,154,155,],[81,81,151,151,151,]),'STRING_LITERAL':([71,],[98,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'type':([0,8,15,17,21,65,],[2,14,35,14,35,14,]),'param':([6,],[7,]),'scope':([7,39,104,114,140,152,],[9,66,122,132,145,156,]),'declarations':([8,17,],[11,45,]),'declaration':([8,15,17,21,65,],[13,24,13,24,89,]),'new_scope':([10,],[15,]),'term':([14,15,21,32,35,43,49,50,51,52,60,64,65,67,68,82,105,106,107,108,109,110,111,112,113,117,118,120,141,],[18,33,33,59,63,59,59,59,59,59,77,59,90,59,95,99,59,59,59,59,59,59,59,59,59,95,95,95,59,]),'statements':([15,21,],[20,47,]),'statement':([15,21,],[21,21,]),'expression':([15,21,32,43,49,50,51,52,60,64,67,105,106,107,108,109,110,111,112,113,141,],[22,22,58,69,72,73,74,75,78,86,86,123,124,125,126,127,128,129,86,86,146,]),'assignment':([15,21,65,],[23,23,88,]),'array_declaration':([15,21,],[25,25,]),'if_statement':([15,21,],[26,26,]),'for_statement':([15,21,],[27,27,]),'do_while_statement':([15,21,],[28,28,]),'while_statement':([15,21,],[29,29,]),'call_function':([15,21,],[30,30,]),'return_statement':([15,21,],[31,31,]),'factor':([15,21,32,43,49,50,51,52,60,62,64,67,68,82,105,106,107,108,109,110,111,112,113,117,118,120,141,],[34,34,34,34,34,34,34,34,79,83,34,34,96,100,34,34,34,34,34,34,34,34,34,96,96,96,34,]),'print_statement':([15,21,],[42,42,]),'array_index':([33,90,],[61,61,]),'factor_char':([60,82,],[80,101,]),'condition':([64,67,112,113,],[85,92,130,131,]),'for_initilizer':([65,],[87,]),'passing_param':([68,117,118,120,],[93,134,135,137,]),'assignment_array':([121,],[138,]),'sequence':([144,154,155,],[149,157,158,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> type MAIN param scope','main',4,'p_start','parser.py',31),
  ('scope -> OPEN_BRAKETS new_scope statements CLOSE_BRAKETS','scope',4,'p_scope','parser.py',39),
  ('new_scope -> <empty>','new_scope',0,'p_new_scope','parser.py',47),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',56),
  ('statements -> statement','statements',1,'p_statements','parser.py',57),
  ('statement -> expression SEMI_COLON','statement',2,'p_statement','parser.py',68),
  ('statement -> assignment SEMI_COLON','statement',2,'p_statement','parser.py',69),
  ('statement -> declaration SEMI_COLON','statement',2,'p_statement','parser.py',70),
  ('statement -> array_declaration SEMI_COLON','statement',2,'p_statement','parser.py',71),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',72),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',73),
  ('statement -> do_while_statement','statement',1,'p_statement','parser.py',74),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',75),
  ('statement -> call_function','statement',1,'p_statement','parser.py',76),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',77),
  ('assignment -> term ASSING expression','assignment',3,'p_assignment','parser.py',84),
  ('assignment -> term ASSING term','assignment',3,'p_assignment','parser.py',85),
  ('assignment -> term ASSING factor','assignment',3,'p_assignment','parser.py',86),
  ('assignment -> term ASSING factor_char','assignment',3,'p_assignment','parser.py',87),
  ('assignment -> term array_index ASSING factor','assignment',4,'p_assignment','parser.py',88),
  ('assignment -> term array_index ASSING term','assignment',4,'p_assignment','parser.py',89),
  ('assignment -> term array_index ASSING factor_char','assignment',4,'p_assignment','parser.py',90),
  ('factor_char -> CHARACTER','factor_char',1,'p_factor_char','parser.py',104),
  ('expression -> expression SUM expression','expression',3,'p_expression_binop','parser.py',111),
  ('expression -> expression SUB expression','expression',3,'p_expression_binop','parser.py',112),
  ('expression -> expression MUL expression','expression',3,'p_expression_binop','parser.py',113),
  ('expression -> expression DIV expression','expression',3,'p_expression_binop','parser.py',114),
  ('expression -> expression DECREMENT','expression',2,'p_expression_binop','parser.py',115),
  ('expression -> expression INCREMENT','expression',2,'p_expression_binop','parser.py',116),
  ('expression -> OPEN_PAREN expression CLOSE_PAREN','expression',3,'p_expression_binop','parser.py',117),
  ('expression -> term','expression',1,'p_expression_term','parser.py',130),
  ('expression -> factor','expression',1,'p_expression_term','parser.py',131),
  ('term -> IDENTIFIER','term',1,'p_term','parser.py',138),
  ('for_statement -> FOR OPEN_PAREN for_initilizer SEMI_COLON condition SEMI_COLON expression CLOSE_PAREN scope','for_statement',9,'p_for_statement','parser.py',147),
  ('for_initilizer -> assignment','for_initilizer',1,'p_for_initializer','parser.py',154),
  ('for_initilizer -> declaration','for_initilizer',1,'p_for_initializer','parser.py',155),
  ('if_statement -> IF OPEN_PAREN condition CLOSE_PAREN scope','if_statement',5,'p_if_statement','parser.py',164),
  ('if_statement -> IF OPEN_PAREN condition CLOSE_PAREN scope ELSE scope','if_statement',7,'p_if_statement','parser.py',165),
  ('factor -> NUMBER','factor',1,'p_factor_num','parser.py',176),
  ('type -> INT','type',1,'p_type','parser.py',182),
  ('type -> FLOAT','type',1,'p_type','parser.py',183),
  ('type -> CHAR','type',1,'p_type','parser.py',184),
  ('condition -> expression OR expression','condition',3,'p_condition','parser.py',192),
  ('condition -> expression NOT expression','condition',3,'p_condition','parser.py',193),
  ('condition -> expression EQUALS expression','condition',3,'p_condition','parser.py',194),
  ('condition -> expression GREATER expression','condition',3,'p_condition','parser.py',195),
  ('condition -> expression LESSER expression','condition',3,'p_condition','parser.py',196),
  ('condition -> expression GREATER_OR_EQUALS expression','condition',3,'p_condition','parser.py',197),
  ('condition -> expression LESSER_OR_EQUALS expression','condition',3,'p_condition','parser.py',198),
  ('declaration -> type term','declaration',2,'p_declaration','parser.py',206),
  ('declarations -> declaration COMMA declarations','declarations',3,'p_declarations','parser.py',222),
  ('declarations -> declaration','declarations',1,'p_declarations','parser.py',223),
  ('passing_param -> term COMMA passing_param','passing_param',3,'p_passing_param','parser.py',231),
  ('passing_param -> term','passing_param',1,'p_passing_param','parser.py',232),
  ('passing_param -> factor COMMA passing_param','passing_param',3,'p_passing_param','parser.py',233),
  ('passing_param -> factor','passing_param',1,'p_passing_param','parser.py',234),
  ('param -> OPEN_PAREN declarations CLOSE_PAREN','param',3,'p_param','parser.py',245),
  ('param -> OPEN_PAREN CLOSE_PAREN','param',2,'p_param','parser.py',246),
  ('do_while_statement -> DO scope WHILE OPEN_PAREN condition CLOSE_PAREN SEMI_COLON','do_while_statement',7,'p_do_while_statement','parser.py',257),
  ('while_statement -> WHILE OPEN_PAREN condition CLOSE_PAREN scope','while_statement',5,'p_while_statement','parser.py',264),
  ('print_statement -> PRINT OPEN_PAREN STRING_LITERAL CLOSE_PAREN SEMI_COLON','print_statement',5,'p_print_statement','parser.py',271),
  ('print_statement -> PRINT OPEN_PAREN STRING_LITERAL COMMA passing_param CLOSE_PAREN SEMI_COLON','print_statement',7,'p_print_statement','parser.py',272),
  ('call_function -> IDENTIFIER OPEN_PAREN passing_param CLOSE_PAREN SEMI_COLON','call_function',5,'p_call_function','parser.py',282),
  ('call_function -> IDENTIFIER OPEN_PAREN CLOSE_PAREN SEMI_COLON','call_function',4,'p_call_function','parser.py',283),
  ('call_function -> print_statement','call_function',1,'p_call_function','parser.py',284),
  ('array_index -> OPEN_INTER factor CLOSE_INTER','array_index',3,'p_array_index','parser.py',300),
  ('assignment_array -> ASSING OPEN_INTER sequence CLOSE_INTER','assignment_array',4,'p_assignment_array','parser.py',306),
  ('array_declaration -> type term OPEN_INTER NUMBER CLOSE_INTER','array_declaration',5,'p_array_declaration','parser.py',313),
  ('array_declaration -> type term OPEN_INTER NUMBER CLOSE_INTER assignment_array','array_declaration',6,'p_array_declaration','parser.py',314),
  ('sequence -> NUMBER COMMA sequence','sequence',3,'p_sequence','parser.py',326),
  ('sequence -> NUMBER','sequence',1,'p_sequence','parser.py',327),
  ('sequence -> CHARACTER COMMA sequence','sequence',3,'p_sequence','parser.py',328),
  ('sequence -> CHARACTER','sequence',1,'p_sequence','parser.py',329),
  ('return_statement -> RETURN expression SEMI_COLON','return_statement',3,'p_return_statement','parser.py',338),
  ('return_statement -> RETURN SEMI_COLON','return_statement',2,'p_return_statement','parser.py',339),
]
