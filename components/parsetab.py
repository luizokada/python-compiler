
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSING BREAK CHAR CHARACTER CLOSE_BRAKETS CLOSE_INTER CLOSE_PAREN COMMA DECREMENT DIFERENT DIV DO DOUBLE ELSE EQUALS FLOAT FOR GREATER GREATER_OR_EQUALS IDENTIFIER IF INCREMENT INT LESSER LESSER_OR_EQUALS MAIN MUL NOT NUMBER OPEN_BRAKETS OPEN_INTER OPEN_PAREN OR PRINT RETURN SEMI_COLON STRING_LITERAL SUB SUM WHILE\n        main : type MAIN param scope\n        \n        scope : OPEN_BRAKETS new_scope statements CLOSE_BRAKETS\n              \n        \n        new_scope :\n        \n        statements : statement statements\n                   | statement  \n                   \n        \n        statement : expression SEMI_COLON\n                  | assignment SEMI_COLON\n                  | declaration SEMI_COLON\n                  | array_declaration SEMI_COLON\n                  | if_statement\n                  | for_statement\n                  | do_while_statement\n                  | while_statement\n                  | call_function\n                  | return_statement\n                 \n        \n        assignment : term ASSING expression\n                    | term ASSING term\n                    | term ASSING factor \n                    | term ASSING factor_char\n                    | term array_index ASSING factor\n                    | term array_index ASSING term\n                    | term array_index ASSING factor_char\n        \n        factor_char : CHARACTER\n        \n        expression : expression SUM expression\n                   | expression SUB expression\n                   | expression MUL expression\n                   | expression DIV expression\n                   | expression DECREMENT\n                   | expression INCREMENT  \n                   | OPEN_PAREN expression CLOSE_PAREN  \n        \n        expression : term\n                    | factor\n                   \n        \n        term : IDENTIFIER\n\n        \n        for_statement : FOR OPEN_PAREN for_initilizer SEMI_COLON condition SEMI_COLON expression CLOSE_PAREN scope\n        \n        for_initilizer : assignment\n                       | declaration\n        \n        \n        if_statement : IF OPEN_PAREN condition CLOSE_PAREN scope \n                     | IF OPEN_PAREN condition CLOSE_PAREN scope ELSE scope\n        \n        factor : NUMBER\n                | SUB NUMBER\n        \n        type : INT\n             | FLOAT\n             | CHAR\n        \n        condition : expression OR expression\n                   | expression NOT expression\n                   | expression EQUALS expression\n                   | expression DIFERENT expression\n                   | expression GREATER expression\n                   | expression LESSER expression\n                   | expression GREATER_OR_EQUALS expression\n                   | expression LESSER_OR_EQUALS expression\n                   | expression DIFERENT factor_char\n                   | expression EQUALS factor_char\n\n                   \n        \n        declaration : type term\n    \n        \n        declarations : declaration COMMA declarations\n                     | declaration\n        \n        passing_param : term COMMA passing_param\n                      | term\n                      | factor COMMA passing_param\n                      | factor\n        \n        param : OPEN_PAREN declarations CLOSE_PAREN\n              | OPEN_PAREN CLOSE_PAREN\n        \n        do_while_statement : DO scope WHILE OPEN_PAREN condition CLOSE_PAREN SEMI_COLON\n      \n        \n        while_statement : WHILE OPEN_PAREN condition CLOSE_PAREN scope\n        \n        \n        print_statement : PRINT OPEN_PAREN STRING_LITERAL CLOSE_PAREN SEMI_COLON\n                        | PRINT OPEN_PAREN STRING_LITERAL COMMA passing_param CLOSE_PAREN SEMI_COLON\n        \n        call_function : IDENTIFIER OPEN_PAREN passing_param CLOSE_PAREN SEMI_COLON\n                      | IDENTIFIER OPEN_PAREN CLOSE_PAREN SEMI_COLON\n                      | print_statement\n                      \n        \n        array_index : OPEN_INTER factor CLOSE_INTER\n        \n        assignment_array : ASSING OPEN_INTER sequence CLOSE_INTER\n        \n        array_declaration : type term OPEN_INTER NUMBER CLOSE_INTER\n                          | type term OPEN_INTER NUMBER CLOSE_INTER assignment_array\n        \n        sequence : NUMBER COMMA sequence\n                 | NUMBER\n                 | CHARACTER COMMA sequence\n                 | CHARACTER\n        \n        return_statement : RETURN expression SEMI_COLON\n                         | RETURN SEMI_COLON\n        '
    
_lr_action_items = {'INT':([0,8,10,15,17,21,26,27,28,29,30,31,43,47,49,56,57,58,67,72,99,119,125,138,139,142,151,153,154,162,],[3,3,-3,3,3,3,-10,-11,-12,-13,-14,-15,-69,-2,-6,-7,-8,-9,3,-79,-78,-68,-37,-64,-67,-65,-38,-63,-66,-34,]),'FLOAT':([0,8,10,15,17,21,26,27,28,29,30,31,43,47,49,56,57,58,67,72,99,119,125,138,139,142,151,153,154,162,],[4,4,-3,4,4,4,-10,-11,-12,-13,-14,-15,-69,-2,-6,-7,-8,-9,4,-79,-78,-68,-37,-64,-67,-65,-38,-63,-66,-34,]),'CHAR':([0,8,10,15,17,21,26,27,28,29,30,31,43,47,49,56,57,58,67,72,99,119,125,138,139,142,151,153,154,162,],[5,5,-3,5,5,5,-10,-11,-12,-13,-14,-15,-69,-2,-6,-7,-8,-9,5,-79,-78,-68,-37,-64,-67,-65,-38,-63,-66,-34,]),'$end':([1,9,47,],[0,-1,-2,]),'MAIN':([2,3,4,5,],[6,-41,-42,-43,]),'IDENTIFIER':([3,4,5,10,14,15,21,26,27,28,29,30,31,33,36,43,44,47,49,50,51,52,53,56,57,58,62,66,67,69,70,72,84,99,107,108,109,110,111,112,113,114,115,116,119,120,121,123,125,138,139,142,147,151,153,154,162,],[-41,-42,-43,-3,19,42,42,-10,-11,-12,-13,-14,-15,19,19,-69,19,-2,-6,19,19,19,19,-7,-8,-9,19,19,19,19,19,-79,19,-78,19,19,19,19,19,19,19,19,19,19,-68,19,19,19,-37,-64,-67,-65,19,-38,-63,-66,-34,]),'OPEN_PAREN':([6,10,15,21,26,27,28,29,30,31,33,38,39,41,42,43,44,45,47,49,50,51,52,53,56,57,58,62,66,69,72,93,99,107,108,109,110,111,112,113,114,115,116,119,125,138,139,142,147,151,153,154,162,],[8,-3,33,33,-10,-11,-12,-13,-14,-15,33,66,67,69,70,-69,33,73,-2,-6,33,33,33,33,-7,-8,-9,33,33,33,-79,116,-78,33,33,33,33,33,33,33,33,33,33,-68,-37,-64,-67,-65,33,-38,-63,-66,-34,]),'OPEN_BRAKETS':([7,12,16,40,106,117,146,158,],[10,-62,-61,10,10,10,10,10,]),'CLOSE_PAREN':([8,11,13,18,19,35,37,46,54,55,59,60,61,70,74,75,76,77,78,83,87,94,95,97,98,100,126,127,128,129,130,131,132,133,134,135,137,140,141,143,152,],[12,16,-56,-54,-33,-32,-39,-55,-28,-29,-40,78,-31,96,-24,-25,-26,-27,-30,-23,106,117,118,-58,-60,122,-44,-45,-46,-53,-47,-52,-48,-49,-50,-51,148,-57,-59,149,158,]),'IF':([10,15,21,26,27,28,29,30,31,43,47,49,56,57,58,72,99,119,125,138,139,142,151,153,154,162,],[-3,38,38,-10,-11,-12,-13,-14,-15,-69,-2,-6,-7,-8,-9,-79,-78,-68,-37,-64,-67,-65,-38,-63,-66,-34,]),'FOR':([10,15,21,26,27,28,29,30,31,43,47,49,56,57,58,72,99,119,125,138,139,142,151,153,154,162,],[-3,39,39,-10,-11,-12,-13,-14,-15,-69,-2,-6,-7,-8,-9,-79,-78,-68,-37,-64,-67,-65,-38,-63,-66,-34,]),'DO':([10,15,21,26,27,28,29,30,31,43,47,49,56,57,58,72,99,119,125,138,139,142,151,153,154,162,],[-3,40,40,-10,-11,-12,-13,-14,-15,-69,-2,-6,-7,-8,-9,-79,-78,-68,-37,-64,-67,-65,-38,-63,-66,-34,]),'WHILE':([10,15,21,26,27,28,29,30,31,43,47,49,56,57,58,68,72,99,119,125,138,139,142,151,153,154,162,],[-3,41,41,-10,-11,-12,-13,-14,-15,-69,-2,-6,-7,-8,-9,93,-79,-78,-68,-37,-64,-67,-65,-38,-63,-66,-34,]),'RETURN':([10,15,21,26,27,28,29,30,31,43,47,49,56,57,58,72,99,119,125,138,139,142,151,153,154,162,],[-3,44,44,-10,-11,-12,-13,-14,-15,-69,-2,-6,-7,-8,-9,-79,-78,-68,-37,-64,-67,-65,-38,-63,-66,-34,]),'NUMBER':([10,15,21,26,27,28,29,30,31,32,33,43,44,47,49,50,51,52,53,56,57,58,62,64,66,69,70,72,84,86,99,107,108,109,110,111,112,113,114,115,116,119,120,121,123,125,138,139,142,147,150,151,153,154,160,161,162,],[-3,37,37,-10,-11,-12,-13,-14,-15,59,37,-69,37,-2,-6,37,37,37,37,-7,-8,-9,37,37,37,37,37,-79,37,105,-78,37,37,37,37,37,37,37,37,37,37,-68,37,37,37,-37,-64,-67,-65,37,156,-38,-63,-66,156,156,-34,]),'SUB':([10,15,19,21,22,26,27,28,29,30,31,33,34,35,37,42,43,44,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,66,69,70,71,72,74,75,76,77,78,79,80,81,84,88,99,107,108,109,110,111,112,113,114,115,116,119,120,121,123,125,126,127,128,130,132,133,134,135,138,139,142,147,151,152,153,154,162,],[-3,32,-33,32,51,-10,-11,-12,-13,-14,-15,32,-31,-32,-39,-33,-69,32,-2,-6,32,32,32,32,-28,-29,-7,-8,-9,-40,51,-31,32,32,32,32,32,51,-79,51,51,51,51,-30,-31,51,-32,32,51,-78,32,32,32,32,32,32,32,32,32,32,-68,32,32,32,-37,51,51,51,51,51,51,51,51,-64,-67,-65,32,-38,51,-63,-66,-34,]),'PRINT':([10,15,21,26,27,28,29,30,31,43,47,49,56,57,58,72,99,119,125,138,139,142,151,153,154,162,],[-3,45,45,-10,-11,-12,-13,-14,-15,-69,-2,-6,-7,-8,-9,-79,-78,-68,-37,-64,-67,-65,-38,-63,-66,-34,]),'COMMA':([13,18,19,37,59,97,98,100,156,157,],[17,-54,-33,-39,-40,120,121,123,160,161,]),'SEMI_COLON':([18,19,22,23,24,25,34,35,37,42,44,54,55,59,61,65,71,74,75,76,77,78,79,80,81,82,83,89,90,91,96,101,102,103,118,122,124,126,127,128,129,130,131,132,133,134,135,136,144,148,149,159,],[-54,-33,49,56,57,58,-31,-32,-39,-33,72,-28,-29,-40,-31,-54,99,-24,-25,-26,-27,-30,-17,-16,-18,-19,-23,115,-35,-36,119,-21,-20,-22,139,142,-72,-44,-45,-46,-53,-47,-52,-48,-49,-50,-51,147,-73,153,154,-71,]),'SUM':([19,22,34,35,37,42,54,55,59,60,61,71,74,75,76,77,78,79,80,81,88,126,127,128,130,132,133,134,135,152,],[-33,50,-31,-32,-39,-33,-28,-29,-40,50,-31,50,50,50,50,50,-30,-31,50,-32,50,50,50,50,50,50,50,50,50,50,]),'MUL':([19,22,34,35,37,42,54,55,59,60,61,71,74,75,76,77,78,79,80,81,88,126,127,128,130,132,133,134,135,152,],[-33,52,-31,-32,-39,-33,-28,-29,-40,52,-31,52,52,52,52,52,-30,-31,52,-32,52,52,52,52,52,52,52,52,52,52,]),'DIV':([19,22,34,35,37,42,54,55,59,60,61,71,74,75,76,77,78,79,80,81,88,126,127,128,130,132,133,134,135,152,],[-33,53,-31,-32,-39,-33,-28,-29,-40,53,-31,53,53,53,53,53,-30,-31,53,-32,53,53,53,53,53,53,53,53,53,53,]),'DECREMENT':([19,22,34,35,37,42,54,55,59,60,61,71,74,75,76,77,78,79,80,81,88,126,127,128,130,132,133,134,135,152,],[-33,54,-31,-32,-39,-33,-28,-29,-40,54,-31,54,54,54,54,54,-30,-31,54,-32,54,54,54,54,54,54,54,54,54,54,]),'INCREMENT':([19,22,34,35,37,42,54,55,59,60,61,71,74,75,76,77,78,79,80,81,88,126,127,128,130,132,133,134,135,152,],[-33,55,-31,-32,-39,-33,-28,-29,-40,55,-31,55,55,55,55,55,-30,-31,55,-32,55,55,55,55,55,55,55,55,55,55,]),'OPEN_INTER':([19,34,42,65,92,145,],[-33,64,-33,86,64,150,]),'OR':([19,35,37,54,55,59,61,74,75,76,77,78,88,],[-33,-32,-39,-28,-29,-40,-31,-24,-25,-26,-27,-30,107,]),'NOT':([19,35,37,54,55,59,61,74,75,76,77,78,88,],[-33,-32,-39,-28,-29,-40,-31,-24,-25,-26,-27,-30,108,]),'EQUALS':([19,35,37,54,55,59,61,74,75,76,77,78,88,],[-33,-32,-39,-28,-29,-40,-31,-24,-25,-26,-27,-30,109,]),'DIFERENT':([19,35,37,54,55,59,61,74,75,76,77,78,88,],[-33,-32,-39,-28,-29,-40,-31,-24,-25,-26,-27,-30,110,]),'GREATER':([19,35,37,54,55,59,61,74,75,76,77,78,88,],[-33,-32,-39,-28,-29,-40,-31,-24,-25,-26,-27,-30,111,]),'LESSER':([19,35,37,54,55,59,61,74,75,76,77,78,88,],[-33,-32,-39,-28,-29,-40,-31,-24,-25,-26,-27,-30,112,]),'GREATER_OR_EQUALS':([19,35,37,54,55,59,61,74,75,76,77,78,88,],[-33,-32,-39,-28,-29,-40,-31,-24,-25,-26,-27,-30,113,]),'LESSER_OR_EQUALS':([19,35,37,54,55,59,61,74,75,76,77,78,88,],[-33,-32,-39,-28,-29,-40,-31,-24,-25,-26,-27,-30,114,]),'ASSING':([19,34,42,63,92,104,124,],[-33,62,-33,84,62,-70,145,]),'CLOSE_BRAKETS':([20,21,26,27,28,29,30,31,43,47,48,49,56,57,58,72,99,119,125,138,139,142,151,153,154,162,],[47,-5,-10,-11,-12,-13,-14,-15,-69,-2,-4,-6,-7,-8,-9,-79,-78,-68,-37,-64,-67,-65,-38,-63,-66,-34,]),'CLOSE_INTER':([37,59,85,105,155,156,157,163,164,],[-39,-40,104,124,159,-75,-77,-74,-76,]),'ELSE':([47,125,],[-2,146,]),'CHARACTER':([62,84,109,110,150,160,161,],[83,83,83,83,157,157,157,]),'STRING_LITERAL':([73,],[100,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'type':([0,8,15,17,21,67,],[2,14,36,14,36,14,]),'param':([6,],[7,]),'scope':([7,40,106,117,146,158,],[9,68,125,138,151,162,]),'declarations':([8,17,],[11,46,]),'declaration':([8,15,17,21,67,],[13,24,13,24,91,]),'new_scope':([10,],[15,]),'term':([14,15,21,33,36,44,50,51,52,53,62,66,67,69,70,84,107,108,109,110,111,112,113,114,115,116,120,121,123,147,],[18,34,34,61,65,61,61,61,61,61,79,61,92,61,97,101,61,61,61,61,61,61,61,61,61,61,97,97,97,61,]),'statements':([15,21,],[20,48,]),'statement':([15,21,],[21,21,]),'expression':([15,21,33,44,50,51,52,53,62,66,69,107,108,109,110,111,112,113,114,115,116,147,],[22,22,60,71,74,75,76,77,80,88,88,126,127,128,130,132,133,134,135,88,88,152,]),'assignment':([15,21,67,],[23,23,90,]),'array_declaration':([15,21,],[25,25,]),'if_statement':([15,21,],[26,26,]),'for_statement':([15,21,],[27,27,]),'do_while_statement':([15,21,],[28,28,]),'while_statement':([15,21,],[29,29,]),'call_function':([15,21,],[30,30,]),'return_statement':([15,21,],[31,31,]),'factor':([15,21,33,44,50,51,52,53,62,64,66,69,70,84,107,108,109,110,111,112,113,114,115,116,120,121,123,147,],[35,35,35,35,35,35,35,35,81,85,35,35,98,102,35,35,35,35,35,35,35,35,35,35,98,98,98,35,]),'print_statement':([15,21,],[43,43,]),'array_index':([34,92,],[63,63,]),'factor_char':([62,84,109,110,],[82,103,129,131,]),'condition':([66,69,115,116,],[87,94,136,137,]),'for_initilizer':([67,],[89,]),'passing_param':([70,120,121,123,],[95,140,141,143,]),'assignment_array':([124,],[144,]),'sequence':([150,160,161,],[155,163,164,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> type MAIN param scope','main',4,'p_start','parser.py',51),
  ('scope -> OPEN_BRAKETS new_scope statements CLOSE_BRAKETS','scope',4,'p_scope','parser.py',59),
  ('new_scope -> <empty>','new_scope',0,'p_new_scope','parser.py',73),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',92),
  ('statements -> statement','statements',1,'p_statements','parser.py',93),
  ('statement -> expression SEMI_COLON','statement',2,'p_statement','parser.py',104),
  ('statement -> assignment SEMI_COLON','statement',2,'p_statement','parser.py',105),
  ('statement -> declaration SEMI_COLON','statement',2,'p_statement','parser.py',106),
  ('statement -> array_declaration SEMI_COLON','statement',2,'p_statement','parser.py',107),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',108),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',109),
  ('statement -> do_while_statement','statement',1,'p_statement','parser.py',110),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',111),
  ('statement -> call_function','statement',1,'p_statement','parser.py',112),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',113),
  ('assignment -> term ASSING expression','assignment',3,'p_assignment','parser.py',120),
  ('assignment -> term ASSING term','assignment',3,'p_assignment','parser.py',121),
  ('assignment -> term ASSING factor','assignment',3,'p_assignment','parser.py',122),
  ('assignment -> term ASSING factor_char','assignment',3,'p_assignment','parser.py',123),
  ('assignment -> term array_index ASSING factor','assignment',4,'p_assignment','parser.py',124),
  ('assignment -> term array_index ASSING term','assignment',4,'p_assignment','parser.py',125),
  ('assignment -> term array_index ASSING factor_char','assignment',4,'p_assignment','parser.py',126),
  ('factor_char -> CHARACTER','factor_char',1,'p_factor_char','parser.py',143),
  ('expression -> expression SUM expression','expression',3,'p_expression_binop','parser.py',150),
  ('expression -> expression SUB expression','expression',3,'p_expression_binop','parser.py',151),
  ('expression -> expression MUL expression','expression',3,'p_expression_binop','parser.py',152),
  ('expression -> expression DIV expression','expression',3,'p_expression_binop','parser.py',153),
  ('expression -> expression DECREMENT','expression',2,'p_expression_binop','parser.py',154),
  ('expression -> expression INCREMENT','expression',2,'p_expression_binop','parser.py',155),
  ('expression -> OPEN_PAREN expression CLOSE_PAREN','expression',3,'p_expression_binop','parser.py',156),
  ('expression -> term','expression',1,'p_expression_term','parser.py',169),
  ('expression -> factor','expression',1,'p_expression_term','parser.py',170),
  ('term -> IDENTIFIER','term',1,'p_term','parser.py',177),
  ('for_statement -> FOR OPEN_PAREN for_initilizer SEMI_COLON condition SEMI_COLON expression CLOSE_PAREN scope','for_statement',9,'p_for_statement','parser.py',186),
  ('for_initilizer -> assignment','for_initilizer',1,'p_for_initializer','parser.py',193),
  ('for_initilizer -> declaration','for_initilizer',1,'p_for_initializer','parser.py',194),
  ('if_statement -> IF OPEN_PAREN condition CLOSE_PAREN scope','if_statement',5,'p_if_statement','parser.py',203),
  ('if_statement -> IF OPEN_PAREN condition CLOSE_PAREN scope ELSE scope','if_statement',7,'p_if_statement','parser.py',204),
  ('factor -> NUMBER','factor',1,'p_factor_num','parser.py',215),
  ('factor -> SUB NUMBER','factor',2,'p_factor_num','parser.py',216),
  ('type -> INT','type',1,'p_type','parser.py',226),
  ('type -> FLOAT','type',1,'p_type','parser.py',227),
  ('type -> CHAR','type',1,'p_type','parser.py',228),
  ('condition -> expression OR expression','condition',3,'p_condition','parser.py',236),
  ('condition -> expression NOT expression','condition',3,'p_condition','parser.py',237),
  ('condition -> expression EQUALS expression','condition',3,'p_condition','parser.py',238),
  ('condition -> expression DIFERENT expression','condition',3,'p_condition','parser.py',239),
  ('condition -> expression GREATER expression','condition',3,'p_condition','parser.py',240),
  ('condition -> expression LESSER expression','condition',3,'p_condition','parser.py',241),
  ('condition -> expression GREATER_OR_EQUALS expression','condition',3,'p_condition','parser.py',242),
  ('condition -> expression LESSER_OR_EQUALS expression','condition',3,'p_condition','parser.py',243),
  ('condition -> expression DIFERENT factor_char','condition',3,'p_condition','parser.py',244),
  ('condition -> expression EQUALS factor_char','condition',3,'p_condition','parser.py',245),
  ('declaration -> type term','declaration',2,'p_declaration','parser.py',260),
  ('declarations -> declaration COMMA declarations','declarations',3,'p_declarations','parser.py',276),
  ('declarations -> declaration','declarations',1,'p_declarations','parser.py',277),
  ('passing_param -> term COMMA passing_param','passing_param',3,'p_passing_param','parser.py',285),
  ('passing_param -> term','passing_param',1,'p_passing_param','parser.py',286),
  ('passing_param -> factor COMMA passing_param','passing_param',3,'p_passing_param','parser.py',287),
  ('passing_param -> factor','passing_param',1,'p_passing_param','parser.py',288),
  ('param -> OPEN_PAREN declarations CLOSE_PAREN','param',3,'p_param','parser.py',299),
  ('param -> OPEN_PAREN CLOSE_PAREN','param',2,'p_param','parser.py',300),
  ('do_while_statement -> DO scope WHILE OPEN_PAREN condition CLOSE_PAREN SEMI_COLON','do_while_statement',7,'p_do_while_statement','parser.py',311),
  ('while_statement -> WHILE OPEN_PAREN condition CLOSE_PAREN scope','while_statement',5,'p_while_statement','parser.py',318),
  ('print_statement -> PRINT OPEN_PAREN STRING_LITERAL CLOSE_PAREN SEMI_COLON','print_statement',5,'p_print_statement','parser.py',325),
  ('print_statement -> PRINT OPEN_PAREN STRING_LITERAL COMMA passing_param CLOSE_PAREN SEMI_COLON','print_statement',7,'p_print_statement','parser.py',326),
  ('call_function -> IDENTIFIER OPEN_PAREN passing_param CLOSE_PAREN SEMI_COLON','call_function',5,'p_call_function','parser.py',336),
  ('call_function -> IDENTIFIER OPEN_PAREN CLOSE_PAREN SEMI_COLON','call_function',4,'p_call_function','parser.py',337),
  ('call_function -> print_statement','call_function',1,'p_call_function','parser.py',338),
  ('array_index -> OPEN_INTER factor CLOSE_INTER','array_index',3,'p_array_index','parser.py',353),
  ('assignment_array -> ASSING OPEN_INTER sequence CLOSE_INTER','assignment_array',4,'p_assignment_array','parser.py',359),
  ('array_declaration -> type term OPEN_INTER NUMBER CLOSE_INTER','array_declaration',5,'p_array_declaration','parser.py',366),
  ('array_declaration -> type term OPEN_INTER NUMBER CLOSE_INTER assignment_array','array_declaration',6,'p_array_declaration','parser.py',367),
  ('sequence -> NUMBER COMMA sequence','sequence',3,'p_sequence','parser.py',379),
  ('sequence -> NUMBER','sequence',1,'p_sequence','parser.py',380),
  ('sequence -> CHARACTER COMMA sequence','sequence',3,'p_sequence','parser.py',381),
  ('sequence -> CHARACTER','sequence',1,'p_sequence','parser.py',382),
  ('return_statement -> RETURN expression SEMI_COLON','return_statement',3,'p_return_statement','parser.py',391),
  ('return_statement -> RETURN SEMI_COLON','return_statement',2,'p_return_statement','parser.py',392),
]
