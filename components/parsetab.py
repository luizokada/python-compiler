
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSING BREAK CHAR CHARACTER CLOSE_BRAKETS CLOSE_INTER CLOSE_PAREN COMMA DECREMENT DIFERENT DIV DO DOUBLE ELSE EQUALS FLOAT FOR GREATER GREATER_OR_EQUALS IDENTIFIER IF INCREMENT INT LESSER LESSER_OR_EQUALS MAIN MUL NOT NUMBER OPEN_BRAKETS OPEN_INTER OPEN_PAREN OR PRINT RETURN SCAN SEMI_COLON STRING_LITERAL SUB SUM WHILE\n        main : type MAIN param scope\n        \n        scope : OPEN_BRAKETS new_scope statements CLOSE_BRAKETS\n              \n        \n        new_scope :\n        \n        statements : statement statements\n                   | statement  \n                   \n        \n        statement : expression SEMI_COLON\n                  | assignment SEMI_COLON\n                  | declaration SEMI_COLON\n                  | array_declaration SEMI_COLON\n                  | if_statement\n                  | for_statement\n                  | do_while_statement\n                  | while_statement\n                  | call_function\n                  | return_statement\n \n        \n        factor_char : CHARACTER\n        \n        expression : term\n                    | factor\n                   \n        \n        term : IDENTIFIER\n\n        \n        type : INT\n             | FLOAT\n             | CHAR\n        \n        factor : NUMBER\n                | SUB NUMBER\n        \n        sequence : NUMBER COMMA sequence\n                 | NUMBER\n                 | CHARACTER COMMA sequence\n                 | CHARACTER\n        \n        return_statement : RETURN expression SEMI_COLON\n                         | RETURN SEMI_COLON\n        \n        assignment : term ASSING expression\n                    | term ASSING term\n                    | term ASSING factor \n                    | term ASSING factor_char\n                    | term array_index ASSING factor\n                    | term array_index ASSING term\n                    | term array_index ASSING factor_char\n        \n        expression : expression SUM expression\n                   | expression SUB expression\n                   | expression MUL expression\n                   | expression DIV expression\n                   | expression DECREMENT\n                   | expression INCREMENT  \n                   | OPEN_PAREN expression CLOSE_PAREN  \n        \n        condition : expression OR expression\n                   | expression AND expression\n                   | expression EQUALS expression\n                   | condition OR condition\n                   | condition AND condition\n                   | expression DIFERENT expression\n                   | expression GREATER expression\n                   | expression LESSER expression\n                   | expression GREATER_OR_EQUALS expression\n                   | expression LESSER_OR_EQUALS expression\n                   | expression DIFERENT factor_char\n                   | expression EQUALS factor_char\n                   | OPEN_PAREN condition CLOSE_PAREN\n                   | NOT condition\n\n                   \n        \n        declaration : type term\n    \n        \n        array_index : OPEN_INTER factor CLOSE_INTER\n        \n        assignment_array : ASSING OPEN_INTER sequence CLOSE_INTER\n        \n        array_declaration : type term OPEN_INTER NUMBER CLOSE_INTER\n                          | type term OPEN_INTER NUMBER CLOSE_INTER assignment_array\n        \n        declarations : declaration COMMA declarations\n                     | declaration\n        \n        if_statement : IF OPEN_PAREN condition CLOSE_PAREN scope \n                     | IF OPEN_PAREN condition CLOSE_PAREN scope ELSE scope\n        \n        param : OPEN_PAREN declarations CLOSE_PAREN\n              | OPEN_PAREN CLOSE_PAREN\n        \n        passing_param : term COMMA passing_param\n                      | term\n                      | factor COMMA passing_param\n                      | factor\n        \n        print_statement : PRINT OPEN_PAREN STRING_LITERAL CLOSE_PAREN SEMI_COLON\n                        | PRINT OPEN_PAREN STRING_LITERAL COMMA passing_param CLOSE_PAREN SEMI_COLON\n        \n        scan_statement : SCAN OPEN_PAREN STRING_LITERAL COMMA passing_param CLOSE_PAREN SEMI_COLON\n        \n        call_function : IDENTIFIER OPEN_PAREN passing_param CLOSE_PAREN SEMI_COLON\n                      | IDENTIFIER OPEN_PAREN CLOSE_PAREN SEMI_COLON\n                      | print_statement\n                      | scan_statement\n                      \n        \n        for_statement : FOR OPEN_PAREN for_initilizer SEMI_COLON condition SEMI_COLON expression CLOSE_PAREN scope\n        \n        for_initilizer : assignment\n        \n        \n        do_while_statement : DO scope WHILE OPEN_PAREN condition CLOSE_PAREN SEMI_COLON\n      \n        \n        while_statement : WHILE OPEN_PAREN condition CLOSE_PAREN scope\n        \n        '
    
_lr_action_items = {'INT':([0,8,10,15,17,21,26,27,28,29,30,31,43,44,49,51,58,59,60,74,103,129,137,152,153,156,167,169,170,171,179,],[3,3,-3,3,3,3,-10,-11,-12,-13,-14,-15,-79,-80,-2,-6,-7,-8,-9,-30,-29,-78,-66,-84,-77,-74,-67,-83,-75,-76,-81,]),'FLOAT':([0,8,10,15,17,21,26,27,28,29,30,31,43,44,49,51,58,59,60,74,103,129,137,152,153,156,167,169,170,171,179,],[4,4,-3,4,4,4,-10,-11,-12,-13,-14,-15,-79,-80,-2,-6,-7,-8,-9,-30,-29,-78,-66,-84,-77,-74,-67,-83,-75,-76,-81,]),'CHAR':([0,8,10,15,17,21,26,27,28,29,30,31,43,44,49,51,58,59,60,74,103,129,137,152,153,156,167,169,170,171,179,],[5,5,-3,5,5,5,-10,-11,-12,-13,-14,-15,-79,-80,-2,-6,-7,-8,-9,-30,-29,-78,-66,-84,-77,-74,-67,-83,-75,-76,-81,]),'$end':([1,9,49,],[0,-1,-2,]),'MAIN':([2,3,4,5,],[6,-20,-21,-22,]),'IDENTIFIER':([3,4,5,10,14,15,21,26,27,28,29,30,31,35,36,43,44,45,49,51,52,53,54,55,58,59,60,61,68,69,71,72,74,86,90,93,103,114,115,116,117,118,119,120,121,122,123,125,126,129,130,131,133,134,137,152,153,156,162,167,169,170,171,179,],[-20,-21,-22,-3,19,42,42,-10,-11,-12,-13,-14,-15,19,19,-79,-80,19,-2,-6,19,19,19,19,-7,-8,-9,19,19,19,19,19,-30,19,19,19,-29,19,19,19,19,19,19,19,19,19,19,19,19,-78,19,19,19,19,-66,-84,-77,-74,19,-67,-83,-75,-76,-81,]),'OPEN_PAREN':([6,10,15,21,26,27,28,29,30,31,35,38,39,41,42,43,44,45,46,47,49,51,52,53,54,55,58,59,60,61,68,71,74,90,93,97,103,114,115,116,117,118,119,120,121,122,123,125,126,129,137,152,153,156,162,167,169,170,171,179,],[8,-3,35,35,-10,-11,-12,-13,-14,-15,35,68,69,71,72,-79,-80,35,75,76,-2,-6,35,35,35,35,-7,-8,-9,35,90,90,-30,90,90,126,-29,90,90,35,35,35,35,35,35,35,35,90,90,-78,-66,-84,-77,-74,35,-67,-83,-75,-76,-81,]),'OPEN_BRAKETS':([7,12,16,40,113,127,161,175,],[10,-69,-68,10,10,10,10,10,]),'CLOSE_PAREN':([8,11,13,18,19,33,37,48,56,57,64,65,66,72,77,78,79,80,85,88,91,98,99,101,102,104,111,112,124,136,138,139,140,141,142,143,144,145,146,147,148,149,151,154,155,157,158,168,],[12,16,-65,-59,-19,-18,-23,-64,-42,-43,-24,88,-17,100,-38,-39,-40,-41,-16,-44,113,127,128,-71,-73,132,136,88,-58,-57,-48,-49,-45,-46,-47,-56,-50,-55,-51,-52,-53,-54,163,-70,-72,164,165,175,]),'IF':([10,15,21,26,27,28,29,30,31,43,44,49,51,58,59,60,74,103,129,137,152,153,156,167,169,170,171,179,],[-3,38,38,-10,-11,-12,-13,-14,-15,-79,-80,-2,-6,-7,-8,-9,-30,-29,-78,-66,-84,-77,-74,-67,-83,-75,-76,-81,]),'FOR':([10,15,21,26,27,28,29,30,31,43,44,49,51,58,59,60,74,103,129,137,152,153,156,167,169,170,171,179,],[-3,39,39,-10,-11,-12,-13,-14,-15,-79,-80,-2,-6,-7,-8,-9,-30,-29,-78,-66,-84,-77,-74,-67,-83,-75,-76,-81,]),'DO':([10,15,21,26,27,28,29,30,31,43,44,49,51,58,59,60,74,103,129,137,152,153,156,167,169,170,171,179,],[-3,40,40,-10,-11,-12,-13,-14,-15,-79,-80,-2,-6,-7,-8,-9,-30,-29,-78,-66,-84,-77,-74,-67,-83,-75,-76,-81,]),'WHILE':([10,15,21,26,27,28,29,30,31,43,44,49,51,58,59,60,70,74,103,129,137,152,153,156,167,169,170,171,179,],[-3,41,41,-10,-11,-12,-13,-14,-15,-79,-80,-2,-6,-7,-8,-9,97,-30,-29,-78,-66,-84,-77,-74,-67,-83,-75,-76,-81,]),'RETURN':([10,15,21,26,27,28,29,30,31,43,44,49,51,58,59,60,74,103,129,137,152,153,156,167,169,170,171,179,],[-3,45,45,-10,-11,-12,-13,-14,-15,-79,-80,-2,-6,-7,-8,-9,-30,-29,-78,-66,-84,-77,-74,-67,-83,-75,-76,-81,]),'NUMBER':([10,15,21,26,27,28,29,30,31,34,35,43,44,45,49,51,52,53,54,55,58,59,60,61,63,68,71,72,74,86,89,90,93,103,114,115,116,117,118,119,120,121,122,123,125,126,129,130,131,133,134,137,152,153,156,162,166,167,169,170,171,177,178,179,],[-3,37,37,-10,-11,-12,-13,-14,-15,64,37,-79,-80,37,-2,-6,37,37,37,37,-7,-8,-9,37,37,37,37,37,-30,37,110,37,37,-29,37,37,37,37,37,37,37,37,37,37,37,37,-78,37,37,37,37,-66,-84,-77,-74,37,173,-67,-83,-75,-76,173,173,-81,]),'SUB':([10,15,19,21,22,26,27,28,29,30,31,32,33,35,37,42,43,44,45,49,51,52,53,54,55,56,57,58,59,60,61,63,64,65,66,68,71,72,73,74,77,78,79,80,81,82,83,86,88,90,92,93,103,112,114,115,116,117,118,119,120,121,122,123,125,126,129,130,131,133,134,137,140,141,142,144,146,147,148,149,152,153,156,162,167,168,169,170,171,179,],[-3,34,-19,34,53,-10,-11,-12,-13,-14,-15,-17,-18,34,-23,-19,-79,-80,34,-2,-6,34,34,34,34,-42,-43,-7,-8,-9,34,34,-24,53,-17,34,34,34,53,-30,53,53,53,53,-17,53,-18,34,-44,34,53,34,-29,53,34,34,34,34,34,34,34,34,34,34,34,34,-78,34,34,34,34,-66,53,53,53,53,53,53,53,53,-84,-77,-74,34,-67,53,-83,-75,-76,-81,]),'PRINT':([10,15,21,26,27,28,29,30,31,43,44,49,51,58,59,60,74,103,129,137,152,153,156,167,169,170,171,179,],[-3,46,46,-10,-11,-12,-13,-14,-15,-79,-80,-2,-6,-7,-8,-9,-30,-29,-78,-66,-84,-77,-74,-67,-83,-75,-76,-81,]),'SCAN':([10,15,21,26,27,28,29,30,31,43,44,49,51,58,59,60,74,103,129,137,152,153,156,167,169,170,171,179,],[-3,47,47,-10,-11,-12,-13,-14,-15,-79,-80,-2,-6,-7,-8,-9,-30,-29,-78,-66,-84,-77,-74,-67,-83,-75,-76,-81,]),'COMMA':([13,18,19,37,64,101,102,104,105,173,174,],[17,-59,-19,-23,-24,130,131,133,134,177,178,]),'SUM':([19,22,32,33,37,42,56,57,64,65,66,73,77,78,79,80,81,82,83,88,92,112,140,141,142,144,146,147,148,149,168,],[-19,52,-17,-18,-23,-19,-42,-43,-24,52,-17,52,52,52,52,52,-17,52,-18,-44,52,52,52,52,52,52,52,52,52,52,52,]),'MUL':([19,22,32,33,37,42,56,57,64,65,66,73,77,78,79,80,81,82,83,88,92,112,140,141,142,144,146,147,148,149,168,],[-19,54,-17,-18,-23,-19,-42,-43,-24,54,-17,54,54,54,54,54,-17,54,-18,-44,54,54,54,54,54,54,54,54,54,54,54,]),'DIV':([19,22,32,33,37,42,56,57,64,65,66,73,77,78,79,80,81,82,83,88,92,112,140,141,142,144,146,147,148,149,168,],[-19,55,-17,-18,-23,-19,-42,-43,-24,55,-17,55,55,55,55,55,-17,55,-18,-44,55,55,55,55,55,55,55,55,55,55,55,]),'DECREMENT':([19,22,32,33,37,42,56,57,64,65,66,73,77,78,79,80,81,82,83,88,92,112,140,141,142,144,146,147,148,149,168,],[-19,56,-17,-18,-23,-19,-42,-43,-24,56,-17,56,56,56,56,56,-17,56,-18,-44,56,56,56,56,56,56,56,56,56,56,56,]),'INCREMENT':([19,22,32,33,37,42,56,57,64,65,66,73,77,78,79,80,81,82,83,88,92,112,140,141,142,144,146,147,148,149,168,],[-19,57,-17,-18,-23,-19,-42,-43,-24,57,-17,57,57,57,57,57,-17,57,-18,-44,57,57,57,57,57,57,57,57,57,57,57,]),'OPEN_INTER':([19,32,42,67,96,160,],[-19,63,-19,89,63,166,]),'SEMI_COLON':([19,22,23,24,25,32,33,37,42,45,56,57,64,66,67,73,77,78,79,80,81,82,83,84,85,88,94,95,100,106,107,108,124,128,132,135,136,138,139,140,141,142,143,144,145,146,147,148,149,150,159,163,164,165,176,],[-19,51,58,59,60,-17,-18,-23,-19,74,-42,-43,-24,-17,-59,103,-38,-39,-40,-41,-17,-31,-18,-34,-16,-44,125,-82,129,-36,-35,-37,-58,153,156,-62,-57,-48,-49,-45,-46,-47,-56,-50,-55,-51,-52,-53,-54,162,-63,169,170,171,-61,]),'OR':([19,33,37,56,57,64,66,77,78,79,80,85,88,91,92,98,111,112,124,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,],[-19,-18,-23,-42,-43,-24,-17,-38,-39,-40,-41,-16,-44,114,116,114,114,116,114,-57,114,114,-45,-46,-47,-56,-50,-55,-51,-52,-53,-54,114,114,]),'AND':([19,33,37,56,57,64,66,77,78,79,80,85,88,91,92,98,111,112,124,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,],[-19,-18,-23,-42,-43,-24,-17,-38,-39,-40,-41,-16,-44,115,117,115,115,117,115,-57,115,115,-45,-46,-47,-56,-50,-55,-51,-52,-53,-54,115,115,]),'EQUALS':([19,33,37,56,57,64,66,77,78,79,80,88,92,112,],[-19,-18,-23,-42,-43,-24,-17,-38,-39,-40,-41,-44,118,118,]),'DIFERENT':([19,33,37,56,57,64,66,77,78,79,80,88,92,112,],[-19,-18,-23,-42,-43,-24,-17,-38,-39,-40,-41,-44,119,119,]),'GREATER':([19,33,37,56,57,64,66,77,78,79,80,88,92,112,],[-19,-18,-23,-42,-43,-24,-17,-38,-39,-40,-41,-44,120,120,]),'LESSER':([19,33,37,56,57,64,66,77,78,79,80,88,92,112,],[-19,-18,-23,-42,-43,-24,-17,-38,-39,-40,-41,-44,121,121,]),'GREATER_OR_EQUALS':([19,33,37,56,57,64,66,77,78,79,80,88,92,112,],[-19,-18,-23,-42,-43,-24,-17,-38,-39,-40,-41,-44,122,122,]),'LESSER_OR_EQUALS':([19,33,37,56,57,64,66,77,78,79,80,88,92,112,],[-19,-18,-23,-42,-43,-24,-17,-38,-39,-40,-41,-44,123,123,]),'ASSING':([19,32,42,62,96,109,135,],[-19,61,-19,86,61,-60,160,]),'CLOSE_BRAKETS':([20,21,26,27,28,29,30,31,43,44,49,50,51,58,59,60,74,103,129,137,152,153,156,167,169,170,171,179,],[49,-5,-10,-11,-12,-13,-14,-15,-79,-80,-2,-4,-6,-7,-8,-9,-30,-29,-78,-66,-84,-77,-74,-67,-83,-75,-76,-81,]),'CLOSE_INTER':([37,64,87,110,172,173,174,180,181,],[-23,-24,109,135,176,-26,-28,-25,-27,]),'ELSE':([49,137,],[-2,161,]),'CHARACTER':([61,86,118,119,166,177,178,],[85,85,85,85,174,174,174,]),'NOT':([68,71,90,93,114,115,125,126,],[93,93,93,93,93,93,93,93,]),'STRING_LITERAL':([75,76,],[104,105,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'type':([0,8,15,17,21,],[2,14,36,14,36,]),'param':([6,],[7,]),'scope':([7,40,113,127,161,175,],[9,70,137,152,167,179,]),'declarations':([8,17,],[11,48,]),'declaration':([8,15,17,21,],[13,24,13,24,]),'new_scope':([10,],[15,]),'term':([14,15,21,35,36,45,52,53,54,55,61,68,69,71,72,86,90,93,114,115,116,117,118,119,120,121,122,123,125,126,130,131,133,134,162,],[18,32,32,66,67,66,66,66,66,66,81,66,96,66,101,106,66,66,66,66,66,66,66,66,66,66,66,66,66,66,101,101,101,101,66,]),'statements':([15,21,],[20,50,]),'statement':([15,21,],[21,21,]),'expression':([15,21,35,45,52,53,54,55,61,68,71,90,93,114,115,116,117,118,119,120,121,122,123,125,126,162,],[22,22,65,73,77,78,79,80,82,92,92,112,92,92,92,140,141,142,144,146,147,148,149,92,92,168,]),'assignment':([15,21,69,],[23,23,95,]),'array_declaration':([15,21,],[25,25,]),'if_statement':([15,21,],[26,26,]),'for_statement':([15,21,],[27,27,]),'do_while_statement':([15,21,],[28,28,]),'while_statement':([15,21,],[29,29,]),'call_function':([15,21,],[30,30,]),'return_statement':([15,21,],[31,31,]),'factor':([15,21,35,45,52,53,54,55,61,63,68,71,72,86,90,93,114,115,116,117,118,119,120,121,122,123,125,126,130,131,133,134,162,],[33,33,33,33,33,33,33,33,83,87,33,33,102,107,33,33,33,33,33,33,33,33,33,33,33,33,33,33,102,102,102,102,33,]),'print_statement':([15,21,],[43,43,]),'scan_statement':([15,21,],[44,44,]),'array_index':([32,96,],[62,62,]),'factor_char':([61,86,118,119,],[84,108,143,145,]),'condition':([68,71,90,93,114,115,125,126,],[91,98,111,124,138,139,150,151,]),'for_initilizer':([69,],[94,]),'passing_param':([72,130,131,133,134,],[99,154,155,157,158,]),'assignment_array':([135,],[159,]),'sequence':([166,177,178,],[172,180,181,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> type MAIN param scope','main',4,'p_start','parser.py',60),
  ('scope -> OPEN_BRAKETS new_scope statements CLOSE_BRAKETS','scope',4,'p_scope','parser.py',68),
  ('new_scope -> <empty>','new_scope',0,'p_new_scope','parser.py',83),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',98),
  ('statements -> statement','statements',1,'p_statements','parser.py',99),
  ('statement -> expression SEMI_COLON','statement',2,'p_statement','parser.py',110),
  ('statement -> assignment SEMI_COLON','statement',2,'p_statement','parser.py',111),
  ('statement -> declaration SEMI_COLON','statement',2,'p_statement','parser.py',112),
  ('statement -> array_declaration SEMI_COLON','statement',2,'p_statement','parser.py',113),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',114),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',115),
  ('statement -> do_while_statement','statement',1,'p_statement','parser.py',116),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',117),
  ('statement -> call_function','statement',1,'p_statement','parser.py',118),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',119),
  ('factor_char -> CHARACTER','factor_char',1,'p_factor_char','parser.py',129),
  ('expression -> term','expression',1,'p_expression_term','parser.py',137),
  ('expression -> factor','expression',1,'p_expression_term','parser.py',138),
  ('term -> IDENTIFIER','term',1,'p_term','parser.py',156),
  ('type -> INT','type',1,'p_type','parser.py',165),
  ('type -> FLOAT','type',1,'p_type','parser.py',166),
  ('type -> CHAR','type',1,'p_type','parser.py',167),
  ('factor -> NUMBER','factor',1,'p_factor_num','parser.py',175),
  ('factor -> SUB NUMBER','factor',2,'p_factor_num','parser.py',176),
  ('sequence -> NUMBER COMMA sequence','sequence',3,'p_sequence','parser.py',188),
  ('sequence -> NUMBER','sequence',1,'p_sequence','parser.py',189),
  ('sequence -> CHARACTER COMMA sequence','sequence',3,'p_sequence','parser.py',190),
  ('sequence -> CHARACTER','sequence',1,'p_sequence','parser.py',191),
  ('return_statement -> RETURN expression SEMI_COLON','return_statement',3,'p_return_statement','parser.py',201),
  ('return_statement -> RETURN SEMI_COLON','return_statement',2,'p_return_statement','parser.py',202),
  ('assignment -> term ASSING expression','assignment',3,'p_assignment','parser.py',214),
  ('assignment -> term ASSING term','assignment',3,'p_assignment','parser.py',215),
  ('assignment -> term ASSING factor','assignment',3,'p_assignment','parser.py',216),
  ('assignment -> term ASSING factor_char','assignment',3,'p_assignment','parser.py',217),
  ('assignment -> term array_index ASSING factor','assignment',4,'p_assignment','parser.py',218),
  ('assignment -> term array_index ASSING term','assignment',4,'p_assignment','parser.py',219),
  ('assignment -> term array_index ASSING factor_char','assignment',4,'p_assignment','parser.py',220),
  ('expression -> expression SUM expression','expression',3,'p_expression_binop','parser.py',238),
  ('expression -> expression SUB expression','expression',3,'p_expression_binop','parser.py',239),
  ('expression -> expression MUL expression','expression',3,'p_expression_binop','parser.py',240),
  ('expression -> expression DIV expression','expression',3,'p_expression_binop','parser.py',241),
  ('expression -> expression DECREMENT','expression',2,'p_expression_binop','parser.py',242),
  ('expression -> expression INCREMENT','expression',2,'p_expression_binop','parser.py',243),
  ('expression -> OPEN_PAREN expression CLOSE_PAREN','expression',3,'p_expression_binop','parser.py',244),
  ('condition -> expression OR expression','condition',3,'p_condition','parser.py',257),
  ('condition -> expression AND expression','condition',3,'p_condition','parser.py',258),
  ('condition -> expression EQUALS expression','condition',3,'p_condition','parser.py',259),
  ('condition -> condition OR condition','condition',3,'p_condition','parser.py',260),
  ('condition -> condition AND condition','condition',3,'p_condition','parser.py',261),
  ('condition -> expression DIFERENT expression','condition',3,'p_condition','parser.py',262),
  ('condition -> expression GREATER expression','condition',3,'p_condition','parser.py',263),
  ('condition -> expression LESSER expression','condition',3,'p_condition','parser.py',264),
  ('condition -> expression GREATER_OR_EQUALS expression','condition',3,'p_condition','parser.py',265),
  ('condition -> expression LESSER_OR_EQUALS expression','condition',3,'p_condition','parser.py',266),
  ('condition -> expression DIFERENT factor_char','condition',3,'p_condition','parser.py',267),
  ('condition -> expression EQUALS factor_char','condition',3,'p_condition','parser.py',268),
  ('condition -> OPEN_PAREN condition CLOSE_PAREN','condition',3,'p_condition','parser.py',269),
  ('condition -> NOT condition','condition',2,'p_condition','parser.py',270),
  ('declaration -> type term','declaration',2,'p_declaration','parser.py',297),
  ('array_index -> OPEN_INTER factor CLOSE_INTER','array_index',3,'p_array_index','parser.py',311),
  ('assignment_array -> ASSING OPEN_INTER sequence CLOSE_INTER','assignment_array',4,'p_assignment_array','parser.py',317),
  ('array_declaration -> type term OPEN_INTER NUMBER CLOSE_INTER','array_declaration',5,'p_array_declaration','parser.py',324),
  ('array_declaration -> type term OPEN_INTER NUMBER CLOSE_INTER assignment_array','array_declaration',6,'p_array_declaration','parser.py',325),
  ('declarations -> declaration COMMA declarations','declarations',3,'p_declarations','parser.py',338),
  ('declarations -> declaration','declarations',1,'p_declarations','parser.py',339),
  ('if_statement -> IF OPEN_PAREN condition CLOSE_PAREN scope','if_statement',5,'p_if_statement','parser.py',349),
  ('if_statement -> IF OPEN_PAREN condition CLOSE_PAREN scope ELSE scope','if_statement',7,'p_if_statement','parser.py',350),
  ('param -> OPEN_PAREN declarations CLOSE_PAREN','param',3,'p_param','parser.py',361),
  ('param -> OPEN_PAREN CLOSE_PAREN','param',2,'p_param','parser.py',362),
  ('passing_param -> term COMMA passing_param','passing_param',3,'p_passing_param','parser.py',372),
  ('passing_param -> term','passing_param',1,'p_passing_param','parser.py',373),
  ('passing_param -> factor COMMA passing_param','passing_param',3,'p_passing_param','parser.py',374),
  ('passing_param -> factor','passing_param',1,'p_passing_param','parser.py',375),
  ('print_statement -> PRINT OPEN_PAREN STRING_LITERAL CLOSE_PAREN SEMI_COLON','print_statement',5,'p_print_statement','parser.py',394),
  ('print_statement -> PRINT OPEN_PAREN STRING_LITERAL COMMA passing_param CLOSE_PAREN SEMI_COLON','print_statement',7,'p_print_statement','parser.py',395),
  ('scan_statement -> SCAN OPEN_PAREN STRING_LITERAL COMMA passing_param CLOSE_PAREN SEMI_COLON','scan_statement',7,'p_scan_statement','parser.py',405),
  ('call_function -> IDENTIFIER OPEN_PAREN passing_param CLOSE_PAREN SEMI_COLON','call_function',5,'p_call_function','parser.py',414),
  ('call_function -> IDENTIFIER OPEN_PAREN CLOSE_PAREN SEMI_COLON','call_function',4,'p_call_function','parser.py',415),
  ('call_function -> print_statement','call_function',1,'p_call_function','parser.py',416),
  ('call_function -> scan_statement','call_function',1,'p_call_function','parser.py',417),
  ('for_statement -> FOR OPEN_PAREN for_initilizer SEMI_COLON condition SEMI_COLON expression CLOSE_PAREN scope','for_statement',9,'p_for_statement','parser.py',431),
  ('for_initilizer -> assignment','for_initilizer',1,'p_for_initializer','parser.py',439),
  ('do_while_statement -> DO scope WHILE OPEN_PAREN condition CLOSE_PAREN SEMI_COLON','do_while_statement',7,'p_do_while_statement','parser.py',451),
  ('while_statement -> WHILE OPEN_PAREN condition CLOSE_PAREN scope','while_statement',5,'p_while_statement','parser.py',459),
]
