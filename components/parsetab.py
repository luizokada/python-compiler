
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSING BREAK CHAR CLOSE_BRAKETS CLOSE_PAREN COMMA DECREMENT DIV DO DOUBLE ELSE EQUALS FLOAT FOR GREATER GREATER_OR_EQUALS IDENTIFIER IF INCREMENT INT LESSER LESSER_OR_EQUALS MAIN MUL NOT NUMBER OPEN_BRAKETS OPEN_PAREN OR PRINT RETURN SEMI_COLON SUB SUM WHILE\n        main : type MAIN param scope\n        \n        scope : OPEN_BRAKETS new_scope statements CLOSE_BRAKETS\n              \n        \n        new_scope :\n        \n        statements : statement statements\n                   | statement  \n                   \n        \n        statement : expression SEMI_COLON\n                  | assignment SEMI_COLON\n                  | declaration SEMI_COLON\n                  | if_statement\n                  | for_statement\n                 \n        \n        assignment : term ASSING expression\n                    | term ASSING term\n                    | term ASSING factor \n        \n        expression : expression SUM expression\n                   | expression SUB expression\n                   | expression MUL expression\n                   | expression DIV expression\n                   | expression DECREMENT\n                   | expression INCREMENT\n                   \n        \n        expression : term\n                    | factor\n        \n        term : IDENTIFIER\n\n        \n        for_statement : FOR OPEN_PAREN for_initilizer SEMI_COLON condition SEMI_COLON expression CLOSE_PAREN scope\n        \n        for_initilizer : assignment\n                       | declaration\n        \n        \n        if_statement : IF OPEN_PAREN condition CLOSE_PAREN scope \n                            | IF OPEN_PAREN condition CLOSE_PAREN scope ELSE scope\n        \n        factor : NUMBER\n        \n        type : INT\n             | FLOAT\n             | CHAR\n        \n        condition : expression OR expression\n                   | expression NOT expression\n                   | expression EQUALS expression\n                   | expression GREATER expression\n                   | expression LESSER expression\n                   | expression GREATER_OR_EQUALS expression\n                   | expression LESSER_OR_EQUALS expression\n                   \n        \n        declaration : type term\n                    | type assignment \n        \n        declarations : declaration COMMA declarations\n                     | declaration\n        \n        param : OPEN_PAREN declarations CLOSE_PAREN\n              | OPEN_PAREN CLOSE_PAREN\n        '
    
_lr_action_items = {'INT':([0,8,10,15,17,22,26,27,35,37,44,45,47,71,82,85,],[3,3,-3,3,3,3,-9,-10,-2,-6,-7,-8,3,-26,-27,-23,]),'FLOAT':([0,8,10,15,17,22,26,27,35,37,44,45,47,71,82,85,],[4,4,-3,4,4,4,-9,-10,-2,-6,-7,-8,4,-26,-27,-23,]),'CHAR':([0,8,10,15,17,22,26,27,35,37,44,45,47,71,82,85,],[5,5,-3,5,5,5,-9,-10,-2,-6,-7,-8,5,-26,-27,-23,]),'$end':([1,9,35,],[0,-1,-2,]),'MAIN':([2,3,4,5,],[6,-29,-30,-31,]),'IDENTIFIER':([3,4,5,10,14,15,22,26,27,34,35,37,38,39,40,41,44,45,46,47,63,64,65,66,67,68,69,70,71,81,82,85,],[-29,-30,-31,-3,20,20,20,-9,-10,20,-2,-6,20,20,20,20,-7,-8,20,20,20,20,20,20,20,20,20,20,-26,20,-27,-23,]),'OPEN_PAREN':([6,30,31,],[8,46,47,]),'OPEN_BRAKETS':([7,12,16,62,80,84,],[10,-44,-43,10,10,10,]),'CLOSE_PAREN':([8,11,13,18,19,20,29,32,33,42,43,48,49,50,51,52,53,54,55,56,72,73,74,75,76,77,78,83,],[12,16,-42,-39,-40,-22,-21,-28,-41,-18,-19,-12,-11,-13,-14,-20,-15,-16,-17,62,-32,-33,-34,-35,-36,-37,-38,84,]),'IF':([10,15,22,26,27,35,37,44,45,71,82,85,],[-3,30,30,-9,-10,-2,-6,-7,-8,-26,-27,-23,]),'FOR':([10,15,22,26,27,35,37,44,45,71,82,85,],[-3,31,31,-9,-10,-2,-6,-7,-8,-26,-27,-23,]),'NUMBER':([10,15,22,26,27,34,35,37,38,39,40,41,44,45,46,63,64,65,66,67,68,69,70,71,81,82,85,],[-3,32,32,-9,-10,32,-2,-6,32,32,32,32,-7,-8,32,32,32,32,32,32,32,32,32,-26,32,-27,-23,]),'COMMA':([13,18,19,20,29,32,42,43,48,49,50,51,52,53,54,55,],[17,-39,-40,-22,-21,-28,-18,-19,-12,-11,-13,-14,-20,-15,-16,-17,]),'SEMI_COLON':([18,19,20,23,24,25,28,29,32,42,43,48,49,50,51,52,53,54,55,58,59,60,72,73,74,75,76,77,78,79,],[-39,-40,-22,37,44,45,-20,-21,-28,-18,-19,-12,-11,-13,-14,-20,-15,-16,-17,70,-24,-25,-32,-33,-34,-35,-36,-37,-38,81,]),'ASSING':([18,20,28,61,],[34,-22,34,34,]),'SUM':([20,23,28,29,32,42,43,48,49,50,51,52,53,54,55,57,72,73,74,75,76,77,78,83,],[-22,38,-20,-21,-28,-18,-19,-20,38,-21,38,-20,38,38,38,38,38,38,38,38,38,38,38,38,]),'SUB':([20,23,28,29,32,42,43,48,49,50,51,52,53,54,55,57,72,73,74,75,76,77,78,83,],[-22,39,-20,-21,-28,-18,-19,-20,39,-21,39,-20,39,39,39,39,39,39,39,39,39,39,39,39,]),'MUL':([20,23,28,29,32,42,43,48,49,50,51,52,53,54,55,57,72,73,74,75,76,77,78,83,],[-22,40,-20,-21,-28,-18,-19,-20,40,-21,40,-20,40,40,40,40,40,40,40,40,40,40,40,40,]),'DIV':([20,23,28,29,32,42,43,48,49,50,51,52,53,54,55,57,72,73,74,75,76,77,78,83,],[-22,41,-20,-21,-28,-18,-19,-20,41,-21,41,-20,41,41,41,41,41,41,41,41,41,41,41,41,]),'DECREMENT':([20,23,28,29,32,42,43,48,49,50,51,52,53,54,55,57,72,73,74,75,76,77,78,83,],[-22,42,-20,-21,-28,-18,-19,-20,42,-21,42,-20,42,42,42,42,42,42,42,42,42,42,42,42,]),'INCREMENT':([20,23,28,29,32,42,43,48,49,50,51,52,53,54,55,57,72,73,74,75,76,77,78,83,],[-22,43,-20,-21,-28,-18,-19,-20,43,-21,43,-20,43,43,43,43,43,43,43,43,43,43,43,43,]),'OR':([20,29,32,42,43,51,52,53,54,55,57,],[-22,-21,-28,-18,-19,-14,-20,-15,-16,-17,63,]),'NOT':([20,29,32,42,43,51,52,53,54,55,57,],[-22,-21,-28,-18,-19,-14,-20,-15,-16,-17,64,]),'EQUALS':([20,29,32,42,43,51,52,53,54,55,57,],[-22,-21,-28,-18,-19,-14,-20,-15,-16,-17,65,]),'GREATER':([20,29,32,42,43,51,52,53,54,55,57,],[-22,-21,-28,-18,-19,-14,-20,-15,-16,-17,66,]),'LESSER':([20,29,32,42,43,51,52,53,54,55,57,],[-22,-21,-28,-18,-19,-14,-20,-15,-16,-17,67,]),'GREATER_OR_EQUALS':([20,29,32,42,43,51,52,53,54,55,57,],[-22,-21,-28,-18,-19,-14,-20,-15,-16,-17,68,]),'LESSER_OR_EQUALS':([20,29,32,42,43,51,52,53,54,55,57,],[-22,-21,-28,-18,-19,-14,-20,-15,-16,-17,69,]),'CLOSE_BRAKETS':([21,22,26,27,35,36,37,44,45,71,82,85,],[35,-5,-9,-10,-2,-4,-6,-7,-8,-26,-27,-23,]),'ELSE':([35,71,],[-2,80,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'type':([0,8,15,17,22,47,],[2,14,14,14,14,14,]),'param':([6,],[7,]),'scope':([7,62,80,84,],[9,71,82,85,]),'declarations':([8,17,],[11,33,]),'declaration':([8,15,17,22,47,],[13,25,13,25,60,]),'new_scope':([10,],[15,]),'term':([14,15,22,34,38,39,40,41,46,47,63,64,65,66,67,68,69,70,81,],[18,28,28,48,52,52,52,52,52,61,52,52,52,52,52,52,52,52,52,]),'assignment':([14,15,22,47,],[19,24,24,59,]),'statements':([15,22,],[21,36,]),'statement':([15,22,],[22,22,]),'expression':([15,22,34,38,39,40,41,46,63,64,65,66,67,68,69,70,81,],[23,23,49,51,53,54,55,57,72,73,74,75,76,77,78,57,83,]),'if_statement':([15,22,],[26,26,]),'for_statement':([15,22,],[27,27,]),'factor':([15,22,34,38,39,40,41,46,63,64,65,66,67,68,69,70,81,],[29,29,50,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'condition':([46,70,],[56,79,]),'for_initilizer':([47,],[58,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> type MAIN param scope','main',4,'p_start','parser.py',33),
  ('scope -> OPEN_BRAKETS new_scope statements CLOSE_BRAKETS','scope',4,'p_scope','parser.py',41),
  ('new_scope -> <empty>','new_scope',0,'p_new_scope','parser.py',49),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',58),
  ('statements -> statement','statements',1,'p_statements','parser.py',59),
  ('statement -> expression SEMI_COLON','statement',2,'p_statement','parser.py',70),
  ('statement -> assignment SEMI_COLON','statement',2,'p_statement','parser.py',71),
  ('statement -> declaration SEMI_COLON','statement',2,'p_statement','parser.py',72),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',73),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',74),
  ('assignment -> term ASSING expression','assignment',3,'p_assignment','parser.py',82),
  ('assignment -> term ASSING term','assignment',3,'p_assignment','parser.py',83),
  ('assignment -> term ASSING factor','assignment',3,'p_assignment','parser.py',84),
  ('expression -> expression SUM expression','expression',3,'p_expression_binop','parser.py',97),
  ('expression -> expression SUB expression','expression',3,'p_expression_binop','parser.py',98),
  ('expression -> expression MUL expression','expression',3,'p_expression_binop','parser.py',99),
  ('expression -> expression DIV expression','expression',3,'p_expression_binop','parser.py',100),
  ('expression -> expression DECREMENT','expression',2,'p_expression_binop','parser.py',101),
  ('expression -> expression INCREMENT','expression',2,'p_expression_binop','parser.py',102),
  ('expression -> term','expression',1,'p_expression_term','parser.py',111),
  ('expression -> factor','expression',1,'p_expression_term','parser.py',112),
  ('term -> IDENTIFIER','term',1,'p_term','parser.py',118),
  ('for_statement -> FOR OPEN_PAREN for_initilizer SEMI_COLON condition SEMI_COLON expression CLOSE_PAREN scope','for_statement',9,'p_for_statement','parser.py',127),
  ('for_initilizer -> assignment','for_initilizer',1,'p_for_initializer','parser.py',134),
  ('for_initilizer -> declaration','for_initilizer',1,'p_for_initializer','parser.py',135),
  ('if_statement -> IF OPEN_PAREN condition CLOSE_PAREN scope','if_statement',5,'p_if_statement','parser.py',144),
  ('if_statement -> IF OPEN_PAREN condition CLOSE_PAREN scope ELSE scope','if_statement',7,'p_if_statement','parser.py',145),
  ('factor -> NUMBER','factor',1,'p_factor_num','parser.py',156),
  ('type -> INT','type',1,'p_type','parser.py',162),
  ('type -> FLOAT','type',1,'p_type','parser.py',163),
  ('type -> CHAR','type',1,'p_type','parser.py',164),
  ('condition -> expression OR expression','condition',3,'p_condition','parser.py',172),
  ('condition -> expression NOT expression','condition',3,'p_condition','parser.py',173),
  ('condition -> expression EQUALS expression','condition',3,'p_condition','parser.py',174),
  ('condition -> expression GREATER expression','condition',3,'p_condition','parser.py',175),
  ('condition -> expression LESSER expression','condition',3,'p_condition','parser.py',176),
  ('condition -> expression GREATER_OR_EQUALS expression','condition',3,'p_condition','parser.py',177),
  ('condition -> expression LESSER_OR_EQUALS expression','condition',3,'p_condition','parser.py',178),
  ('declaration -> type term','declaration',2,'p_declaration','parser.py',186),
  ('declaration -> type assignment','declaration',2,'p_declaration','parser.py',187),
  ('declarations -> declaration COMMA declarations','declarations',3,'p_declarations','parser.py',204),
  ('declarations -> declaration','declarations',1,'p_declarations','parser.py',205),
  ('param -> OPEN_PAREN declarations CLOSE_PAREN','param',3,'p_param','parser.py',215),
  ('param -> OPEN_PAREN CLOSE_PAREN','param',2,'p_param','parser.py',216),
]
