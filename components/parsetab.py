
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSING BREAK CHAR CLOSE_BRAKETS CLOSE_PAREN COMMA DECREMENT DIV DO DOUBLE ELSE EQUALS FLOAT FOR GREATER GREATER_OR_EQUALS IDENTIFIER IF INCREMENT INT LESSER LESSER_OR_EQUALS MAIN MUL NOT NUMBER OPEN_BRAKETS OPEN_PAREN OR PRINT RETURN SEMI_COLON STRING_LITERAL SUB SUM WHILE\n        main : type MAIN param scope\n        \n        scope : OPEN_BRAKETS new_scope statements CLOSE_BRAKETS\n              \n        \n        new_scope :\n        \n        statements : statement statements\n                   | statement  \n                   \n        \n        statement : expression SEMI_COLON\n                  | assignment SEMI_COLON\n                  | declaration SEMI_COLON\n                  | if_statement\n                  | for_statement\n                  | do_while_statement\n                  | while_statement\n                  | call_function\n                  | return_statement\n                 \n        \n        assignment : term ASSING expression\n                    | term ASSING term\n                    | term ASSING factor \n        \n        expression : expression SUM expression\n                   | expression SUB expression\n                   | expression MUL expression\n                   | expression DIV expression\n                   | expression DECREMENT\n                   | expression INCREMENT\n                   \n                   \n        \n        expression : term\n                    | factor\n        \n        term : IDENTIFIER\n\n        \n        for_statement : FOR OPEN_PAREN for_initilizer SEMI_COLON condition SEMI_COLON expression CLOSE_PAREN scope\n        \n        for_initilizer : assignment\n                       | declaration\n        \n        \n        if_statement : IF OPEN_PAREN condition CLOSE_PAREN scope \n                     | IF OPEN_PAREN condition CLOSE_PAREN scope ELSE scope\n        \n        factor : NUMBER\n        \n        type : INT\n             | FLOAT\n             | CHAR\n        \n        condition : expression OR expression\n                   | expression NOT expression\n                   | expression EQUALS expression\n                   | expression GREATER expression\n                   | expression LESSER expression\n                   | expression GREATER_OR_EQUALS expression\n                   | expression LESSER_OR_EQUALS expression\n                   \n        \n        declaration : type term\n                    | type assignment \n        \n        declarations : declaration COMMA declarations\n                     | declaration\n        \n        passing_param : term COMMA passing_param\n                      | term\n                      | factor COMMA passing_param\n                      | factor\n        \n        param : OPEN_PAREN declarations CLOSE_PAREN\n              | OPEN_PAREN CLOSE_PAREN\n        \n        do_while_statement : DO scope WHILE OPEN_PAREN condition CLOSE_PAREN SEMI_COLON\n      \n        \n        while_statement : WHILE OPEN_PAREN condition CLOSE_PAREN scope\n        \n        \n        print_statement : PRINT OPEN_PAREN STRING_LITERAL CLOSE_PAREN SEMI_COLON\n                        | PRINT OPEN_PAREN STRING_LITERAL COMMA passing_param CLOSE_PAREN SEMI_COLON\n        \n        call_function : IDENTIFIER OPEN_PAREN passing_param CLOSE_PAREN SEMI_COLON\n                      | IDENTIFIER OPEN_PAREN CLOSE_PAREN SEMI_COLON\n                      | print_statement\n                      \n        \n        return_statement : RETURN expression SEMI_COLON\n                         | RETURN SEMI_COLON\n        '
    
_lr_action_items = {'INT':([0,8,10,15,17,22,26,27,28,29,30,31,39,45,47,54,55,57,62,84,98,103,113,114,117,123,125,126,128,],[3,3,-3,3,3,3,-9,-10,-11,-12,-13,-14,-59,-2,-6,-7,-8,3,-61,-60,-58,-30,-54,-57,-55,-31,-53,-56,-27,]),'FLOAT':([0,8,10,15,17,22,26,27,28,29,30,31,39,45,47,54,55,57,62,84,98,103,113,114,117,123,125,126,128,],[4,4,-3,4,4,4,-9,-10,-11,-12,-13,-14,-59,-2,-6,-7,-8,4,-61,-60,-58,-30,-54,-57,-55,-31,-53,-56,-27,]),'CHAR':([0,8,10,15,17,22,26,27,28,29,30,31,39,45,47,54,55,57,62,84,98,103,113,114,117,123,125,126,128,],[5,5,-3,5,5,5,-9,-10,-11,-12,-13,-14,-59,-2,-6,-7,-8,5,-61,-60,-58,-30,-54,-57,-55,-31,-53,-56,-27,]),'$end':([1,9,45,],[0,-1,-2,]),'MAIN':([2,3,4,5,],[6,-33,-34,-35,]),'IDENTIFIER':([3,4,5,10,14,15,22,26,27,28,29,30,31,39,40,44,45,47,48,49,50,51,54,55,56,57,59,60,62,84,87,88,89,90,91,92,93,94,95,98,99,100,102,103,113,114,117,120,123,125,126,128,],[-33,-34,-35,-3,20,38,38,-9,-10,-11,-12,-13,-14,-59,20,20,-2,-6,20,20,20,20,-7,-8,20,20,20,20,-61,-60,20,20,20,20,20,20,20,20,20,-58,20,20,20,-30,-54,-57,-55,20,-31,-53,-56,-27,]),'OPEN_PAREN':([6,34,35,37,38,42,78,],[8,56,57,59,60,64,95,]),'OPEN_BRAKETS':([7,12,16,36,86,96,119,127,],[10,-52,-51,10,10,10,10,10,]),'CLOSE_PAREN':([8,11,13,18,19,20,33,41,43,52,53,60,63,65,66,67,68,69,70,71,72,79,80,82,83,85,104,105,106,107,108,109,110,112,115,116,118,124,],[12,16,-46,-43,-44,-26,-25,-32,-45,-22,-23,81,-24,-16,-15,-17,-18,-19,-20,-21,86,96,97,-48,-50,101,-36,-37,-38,-39,-40,-41,-42,121,-47,-49,122,127,]),'IF':([10,15,22,26,27,28,29,30,31,39,45,47,54,55,62,84,98,103,113,114,117,123,125,126,128,],[-3,34,34,-9,-10,-11,-12,-13,-14,-59,-2,-6,-7,-8,-61,-60,-58,-30,-54,-57,-55,-31,-53,-56,-27,]),'FOR':([10,15,22,26,27,28,29,30,31,39,45,47,54,55,62,84,98,103,113,114,117,123,125,126,128,],[-3,35,35,-9,-10,-11,-12,-13,-14,-59,-2,-6,-7,-8,-61,-60,-58,-30,-54,-57,-55,-31,-53,-56,-27,]),'DO':([10,15,22,26,27,28,29,30,31,39,45,47,54,55,62,84,98,103,113,114,117,123,125,126,128,],[-3,36,36,-9,-10,-11,-12,-13,-14,-59,-2,-6,-7,-8,-61,-60,-58,-30,-54,-57,-55,-31,-53,-56,-27,]),'WHILE':([10,15,22,26,27,28,29,30,31,39,45,47,54,55,58,62,84,98,103,113,114,117,123,125,126,128,],[-3,37,37,-9,-10,-11,-12,-13,-14,-59,-2,-6,-7,-8,78,-61,-60,-58,-30,-54,-57,-55,-31,-53,-56,-27,]),'RETURN':([10,15,22,26,27,28,29,30,31,39,45,47,54,55,62,84,98,103,113,114,117,123,125,126,128,],[-3,40,40,-9,-10,-11,-12,-13,-14,-59,-2,-6,-7,-8,-61,-60,-58,-30,-54,-57,-55,-31,-53,-56,-27,]),'NUMBER':([10,15,22,26,27,28,29,30,31,39,40,44,45,47,48,49,50,51,54,55,56,59,60,62,84,87,88,89,90,91,92,93,94,95,98,99,100,102,103,113,114,117,120,123,125,126,128,],[-3,41,41,-9,-10,-11,-12,-13,-14,-59,41,41,-2,-6,41,41,41,41,-7,-8,41,41,41,-61,-60,41,41,41,41,41,41,41,41,41,-58,41,41,41,-30,-54,-57,-55,41,-31,-53,-56,-27,]),'PRINT':([10,15,22,26,27,28,29,30,31,39,45,47,54,55,62,84,98,103,113,114,117,123,125,126,128,],[-3,42,42,-9,-10,-11,-12,-13,-14,-59,-2,-6,-7,-8,-61,-60,-58,-30,-54,-57,-55,-31,-53,-56,-27,]),'COMMA':([13,18,19,20,33,41,52,53,63,65,66,67,68,69,70,71,82,83,85,],[17,-43,-44,-26,-25,-32,-22,-23,-24,-16,-15,-17,-18,-19,-20,-21,99,100,102,]),'SEMI_COLON':([18,19,20,23,24,25,32,33,38,40,41,52,53,61,63,65,66,67,68,69,70,71,74,75,76,81,97,101,104,105,106,107,108,109,110,111,121,122,],[-43,-44,-26,47,54,55,-24,-25,-26,62,-32,-22,-23,84,-24,-16,-15,-17,-18,-19,-20,-21,94,-28,-29,98,114,117,-36,-37,-38,-39,-40,-41,-42,120,125,126,]),'ASSING':([18,20,32,38,77,],[44,-26,44,-26,44,]),'SUM':([20,23,32,33,38,41,52,53,61,63,65,66,67,68,69,70,71,73,104,105,106,107,108,109,110,124,],[-26,48,-24,-25,-26,-32,-22,-23,48,-24,-24,48,-25,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'SUB':([20,23,32,33,38,41,52,53,61,63,65,66,67,68,69,70,71,73,104,105,106,107,108,109,110,124,],[-26,49,-24,-25,-26,-32,-22,-23,49,-24,-24,49,-25,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'MUL':([20,23,32,33,38,41,52,53,61,63,65,66,67,68,69,70,71,73,104,105,106,107,108,109,110,124,],[-26,50,-24,-25,-26,-32,-22,-23,50,-24,-24,50,-25,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'DIV':([20,23,32,33,38,41,52,53,61,63,65,66,67,68,69,70,71,73,104,105,106,107,108,109,110,124,],[-26,51,-24,-25,-26,-32,-22,-23,51,-24,-24,51,-25,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'DECREMENT':([20,23,32,33,38,41,52,53,61,63,65,66,67,68,69,70,71,73,104,105,106,107,108,109,110,124,],[-26,52,-24,-25,-26,-32,-22,-23,52,-24,-24,52,-25,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'INCREMENT':([20,23,32,33,38,41,52,53,61,63,65,66,67,68,69,70,71,73,104,105,106,107,108,109,110,124,],[-26,53,-24,-25,-26,-32,-22,-23,53,-24,-24,53,-25,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'OR':([20,33,41,52,53,63,68,69,70,71,73,],[-26,-25,-32,-22,-23,-24,-18,-19,-20,-21,87,]),'NOT':([20,33,41,52,53,63,68,69,70,71,73,],[-26,-25,-32,-22,-23,-24,-18,-19,-20,-21,88,]),'EQUALS':([20,33,41,52,53,63,68,69,70,71,73,],[-26,-25,-32,-22,-23,-24,-18,-19,-20,-21,89,]),'GREATER':([20,33,41,52,53,63,68,69,70,71,73,],[-26,-25,-32,-22,-23,-24,-18,-19,-20,-21,90,]),'LESSER':([20,33,41,52,53,63,68,69,70,71,73,],[-26,-25,-32,-22,-23,-24,-18,-19,-20,-21,91,]),'GREATER_OR_EQUALS':([20,33,41,52,53,63,68,69,70,71,73,],[-26,-25,-32,-22,-23,-24,-18,-19,-20,-21,92,]),'LESSER_OR_EQUALS':([20,33,41,52,53,63,68,69,70,71,73,],[-26,-25,-32,-22,-23,-24,-18,-19,-20,-21,93,]),'CLOSE_BRAKETS':([21,22,26,27,28,29,30,31,39,45,46,47,54,55,62,84,98,103,113,114,117,123,125,126,128,],[45,-5,-9,-10,-11,-12,-13,-14,-59,-2,-4,-6,-7,-8,-61,-60,-58,-30,-54,-57,-55,-31,-53,-56,-27,]),'ELSE':([45,103,],[-2,119,]),'STRING_LITERAL':([64,],[85,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'type':([0,8,15,17,22,57,],[2,14,14,14,14,14,]),'param':([6,],[7,]),'scope':([7,36,86,96,119,127,],[9,58,103,113,123,128,]),'declarations':([8,17,],[11,43,]),'declaration':([8,15,17,22,57,],[13,25,13,25,76,]),'new_scope':([10,],[15,]),'term':([14,15,22,40,44,48,49,50,51,56,57,59,60,87,88,89,90,91,92,93,94,95,99,100,102,120,],[18,32,32,63,65,63,63,63,63,63,77,63,82,63,63,63,63,63,63,63,63,63,82,82,82,63,]),'assignment':([14,15,22,57,],[19,24,24,75,]),'statements':([15,22,],[21,46,]),'statement':([15,22,],[22,22,]),'expression':([15,22,40,44,48,49,50,51,56,59,87,88,89,90,91,92,93,94,95,120,],[23,23,61,66,68,69,70,71,73,73,104,105,106,107,108,109,110,73,73,124,]),'if_statement':([15,22,],[26,26,]),'for_statement':([15,22,],[27,27,]),'do_while_statement':([15,22,],[28,28,]),'while_statement':([15,22,],[29,29,]),'call_function':([15,22,],[30,30,]),'return_statement':([15,22,],[31,31,]),'factor':([15,22,40,44,48,49,50,51,56,59,60,87,88,89,90,91,92,93,94,95,99,100,102,120,],[33,33,33,67,33,33,33,33,33,33,83,33,33,33,33,33,33,33,33,33,83,83,83,33,]),'print_statement':([15,22,],[39,39,]),'condition':([56,59,94,95,],[72,79,111,112,]),'for_initilizer':([57,],[74,]),'passing_param':([60,99,100,102,],[80,115,116,118,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> type MAIN param scope','main',4,'p_start','parser.py',34),
  ('scope -> OPEN_BRAKETS new_scope statements CLOSE_BRAKETS','scope',4,'p_scope','parser.py',42),
  ('new_scope -> <empty>','new_scope',0,'p_new_scope','parser.py',50),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',59),
  ('statements -> statement','statements',1,'p_statements','parser.py',60),
  ('statement -> expression SEMI_COLON','statement',2,'p_statement','parser.py',71),
  ('statement -> assignment SEMI_COLON','statement',2,'p_statement','parser.py',72),
  ('statement -> declaration SEMI_COLON','statement',2,'p_statement','parser.py',73),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',74),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',75),
  ('statement -> do_while_statement','statement',1,'p_statement','parser.py',76),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',77),
  ('statement -> call_function','statement',1,'p_statement','parser.py',78),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',79),
  ('assignment -> term ASSING expression','assignment',3,'p_assignment','parser.py',86),
  ('assignment -> term ASSING term','assignment',3,'p_assignment','parser.py',87),
  ('assignment -> term ASSING factor','assignment',3,'p_assignment','parser.py',88),
  ('expression -> expression SUM expression','expression',3,'p_expression_binop','parser.py',99),
  ('expression -> expression SUB expression','expression',3,'p_expression_binop','parser.py',100),
  ('expression -> expression MUL expression','expression',3,'p_expression_binop','parser.py',101),
  ('expression -> expression DIV expression','expression',3,'p_expression_binop','parser.py',102),
  ('expression -> expression DECREMENT','expression',2,'p_expression_binop','parser.py',103),
  ('expression -> expression INCREMENT','expression',2,'p_expression_binop','parser.py',104),
  ('expression -> term','expression',1,'p_expression_term','parser.py',116),
  ('expression -> factor','expression',1,'p_expression_term','parser.py',117),
  ('term -> IDENTIFIER','term',1,'p_term','parser.py',123),
  ('for_statement -> FOR OPEN_PAREN for_initilizer SEMI_COLON condition SEMI_COLON expression CLOSE_PAREN scope','for_statement',9,'p_for_statement','parser.py',132),
  ('for_initilizer -> assignment','for_initilizer',1,'p_for_initializer','parser.py',139),
  ('for_initilizer -> declaration','for_initilizer',1,'p_for_initializer','parser.py',140),
  ('if_statement -> IF OPEN_PAREN condition CLOSE_PAREN scope','if_statement',5,'p_if_statement','parser.py',149),
  ('if_statement -> IF OPEN_PAREN condition CLOSE_PAREN scope ELSE scope','if_statement',7,'p_if_statement','parser.py',150),
  ('factor -> NUMBER','factor',1,'p_factor_num','parser.py',161),
  ('type -> INT','type',1,'p_type','parser.py',167),
  ('type -> FLOAT','type',1,'p_type','parser.py',168),
  ('type -> CHAR','type',1,'p_type','parser.py',169),
  ('condition -> expression OR expression','condition',3,'p_condition','parser.py',177),
  ('condition -> expression NOT expression','condition',3,'p_condition','parser.py',178),
  ('condition -> expression EQUALS expression','condition',3,'p_condition','parser.py',179),
  ('condition -> expression GREATER expression','condition',3,'p_condition','parser.py',180),
  ('condition -> expression LESSER expression','condition',3,'p_condition','parser.py',181),
  ('condition -> expression GREATER_OR_EQUALS expression','condition',3,'p_condition','parser.py',182),
  ('condition -> expression LESSER_OR_EQUALS expression','condition',3,'p_condition','parser.py',183),
  ('declaration -> type term','declaration',2,'p_declaration','parser.py',191),
  ('declaration -> type assignment','declaration',2,'p_declaration','parser.py',192),
  ('declarations -> declaration COMMA declarations','declarations',3,'p_declarations','parser.py',210),
  ('declarations -> declaration','declarations',1,'p_declarations','parser.py',211),
  ('passing_param -> term COMMA passing_param','passing_param',3,'p_passing_param','parser.py',219),
  ('passing_param -> term','passing_param',1,'p_passing_param','parser.py',220),
  ('passing_param -> factor COMMA passing_param','passing_param',3,'p_passing_param','parser.py',221),
  ('passing_param -> factor','passing_param',1,'p_passing_param','parser.py',222),
  ('param -> OPEN_PAREN declarations CLOSE_PAREN','param',3,'p_param','parser.py',233),
  ('param -> OPEN_PAREN CLOSE_PAREN','param',2,'p_param','parser.py',234),
  ('do_while_statement -> DO scope WHILE OPEN_PAREN condition CLOSE_PAREN SEMI_COLON','do_while_statement',7,'p_do_while_statement','parser.py',245),
  ('while_statement -> WHILE OPEN_PAREN condition CLOSE_PAREN scope','while_statement',5,'p_while_statement','parser.py',252),
  ('print_statement -> PRINT OPEN_PAREN STRING_LITERAL CLOSE_PAREN SEMI_COLON','print_statement',5,'p_print_statement','parser.py',259),
  ('print_statement -> PRINT OPEN_PAREN STRING_LITERAL COMMA passing_param CLOSE_PAREN SEMI_COLON','print_statement',7,'p_print_statement','parser.py',260),
  ('call_function -> IDENTIFIER OPEN_PAREN passing_param CLOSE_PAREN SEMI_COLON','call_function',5,'p_call_function','parser.py',270),
  ('call_function -> IDENTIFIER OPEN_PAREN CLOSE_PAREN SEMI_COLON','call_function',4,'p_call_function','parser.py',271),
  ('call_function -> print_statement','call_function',1,'p_call_function','parser.py',272),
  ('return_statement -> RETURN expression SEMI_COLON','return_statement',3,'p_return_statement','parser.py',286),
  ('return_statement -> RETURN SEMI_COLON','return_statement',2,'p_return_statement','parser.py',287),
]
